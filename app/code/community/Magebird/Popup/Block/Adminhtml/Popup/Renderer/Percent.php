<?php
/**
 * Magebird.com
 *
 * @category   Magebird
 * @package    Magebird_Popup
 * @copyright  Copyright (c) 2015 Magebird (http://www.Magebird.com)
 * @license    http://www.magebird.com/licence
 * Any form of ditribution, sell, transfer forbidden see licence above
 * Code has been obfuscated to prevent licence violations  
 */
$_X=__FILE__;$_c='$_X=__FILE__;$_w='JF9YPV9fRklMRV9fOyRfWT0nSkVFNE9VeG5VMlYxVERkRFBWOWZSa2xNUlY5Zk95UjdJbFZ3YTIweU1uVTJUakV5SW4wOUowcEdPVmxRVmpsbVVtdHNUVkpXT1daUGVWSm1Za1F3YmxOcldUVlhWa0pYVDFkYVUyRXllRTVWYkZrMVdtczVOVlZ0V2xoV1JFSjFWVEowYTJReVNsaFdhMmhQVjBaYWIxWnJVa05qUm1SRlVXMXdhRlpVYXpGV1YzQnJVMjFLU1ZwNlFsVmhNVXB5VjFSS1YxSldWblJqUm14VVVqSk9NMVl5TVRCVE1XdDVWbXRXVmxkSGFGcFZNR1JxWkRGa1ZWSnFVazlTVkZaV1ZrWmtjMkpXV25WVWJrSllVbGRvZFZSVVFUQmxSMVpGVldzNWJHSkZjSEZYYkZaVFYyMVdjMkZGYkdGbGEzQlFXV3hvUTJGc2NGWlZiSEJzVW0xb1NsZHVjRXRVTURGWlducENWV0p1UW1GWlZscHZWbFV4U0dKR2JFNWlWVFYzVmtST2MxVXdOSGRpU0U1c1VrWktVRlZyWkZOaGJIQldWV3hPYUdKSGFFcFhibkJEV1ZkRmQyTkhjR0ZXVmtwVFdsVmFiMU5XY0RaUmJIQk9WMGRqZDFaSGVGTlViVVpZVjJ4a2FrMXRlRnBWTUdScVpXeFJlRmw2UmxwTmJGcEdWakZTVTFsWFNsWk9WM0JoVmxaS1lWUnNaRXBsVmxwMFZHMTRVMUl3TVRSVk1XUXpaREE1Vm1KSVRteFNSa3BRVm1wR2QxZHNUbGhqU0hCb1RXeFpNVlpYY0d0VGJVcEpXbnBDVldFeFNuSlhWRXBYVWxaV2RHTkdWazVYUjJOM1ZrZDBVMU14YTNsV2ExWldWMGRvVmxWdGMzaGpSbkJ6VjI1d2FGWXhXbGhhVlZKVFZESktWMWR0Y0dGV1ZrcGhWR3RhYjFOV2NEWlRhemxwVmxSV2NWZHNWbE5YYXpWWFlVVnNZV1ZyY0doWmEyaHVUVVpTZEdOR1pGcE5iRnBHVjFod1IxTnRTa1ZTVkZaV1VteHJNVmR0ZUV0amJVcEdUVlpPVjJGdGVIUldSRTV6VlRBMGQyTkZiR3BOYlhoYVZUQmthbVF4VW5GU2FsSlBVbFJXU1ZaSGVFTlhWazVJV1ROa1ZWWXpaekJVYTFVeFVsWktkRlJ0ZUZOU2EzQjRWakJXYjJKck1WWk5WRlpVWVcxNFdWcFdWbmRoYkhCV1ZXMXdUazFYYUVwWGJuQlBWREZLZFZwNlFsVmlXRUpRVjFSS1YxSldaRlZUYldocFZsWndjVmRzVmxOWGF6QjRZVVZzWVdWck5WQlpWbFozWVRGd2MxVllaR2hXYXpWNldsVlNVMVF4U2tkaGVrWllVbGRvZFZSV1ZUVldNbFpGVldzNVYxSlZjRmxXTUZadlltMVdjazlXWkd4U1JrcFFXVmQ0ZDFaR1pFWmhSelZPWWtkNE1GcFZaRTlpUmtwSFUyNUtWMVl6WnpCVWExVXhWbFprZEZSdGVGTlNWRUY0VmpJeGVrNVdhM2xXYTFaYVpXeGFWMWxzV25kalJteFlaVVJTVDFKVVJUSlZWekZQWWtaS1IyTklUbGRXUlZrd1ZHdFZNV1JHVG5SVWJYaFRVbXhWZUZaSGVHRmhNVmw0VW01T2JGSkdTbEJXYTJSVFlXeHdWbFZzVG1sV2JXaEtWMjV3UjFRd01WbFJiWEJoVmxaS1YxcFhlSE5XVms1eFZXeHNWRkl5VGpOV01uaGhUa1UxUms1V1ZsZGlhelZaVm10YVlXRkdaRVpoUnpWT1lrZDRlRmxyWkU5aVJrcEdUVWhvV0ZKWGFIVlVWbFV4VjBVeFdGUnRlRk5TYkhCMlZqQldiMkpyTVZaUFZXUnNVa1pLVUZaclduZGhiSEJXVld4S1RsSnJXbnBhVlZKVFZESldjMWRzWkZWV2VsWlVWMVJLVjFKV1pIUk5WbXhVVWpKT05WWkhlR0ZPUlRWR1RsaFNWbUpWTlhOVmExcEdaVlprUm1GSE5VNVdWRkkxVlcweFQySkdTa2RTV0doWVVsZG9kVlJYZUhKbFZrcDBWRzE0VTFKdGREUldNRlp2WW1zeGMySklTbXBTYTFwYVZUQmthbVZHVW5KWGJVWmFUV3hhUmxZeFVsTlhWazVJV1ROc1dHSkdWalJYVkVwWFVsWldWVk5zV21sVFIyTjNWa2MxZDFNeGJGZFRiR1JzVWtaS1QxcFhNVFJoYkhCV1ZXeGFUbUpHV25wYVZWSlRWREpLVjFOdVdsaFNWMmgxVkZWYWMxWXhjRWxXYkd4VVVqSk9ObFpHVm1GT1JUVkdUbFZXVldKR1duQldiRnBoWVd4d1ZsVnRjRTVOVm13MFdsVlNVMVF5U2xkVGFrNVlWbXh2TUZSclZURldWbVJ6V2tac1ZGSXlUak5XTVZwaFRrVTFSazVXVmxaaVZUVnpWV3RhVmsxV1pFWmhSelZPVmxSU05GcFZVbE5VTWxaMFlVWnNXRkpYYUhWVVZWcDNWakpXUlZWck9WZFNia0p4VjJ4V1UxVXlTa2hVYkdoVVlUSlNXbFV3WkdwbFZsRjNXa1JTVjAxWGFFcFhibkJIVlVaS1ZtTkhjR0ZXVmtwUFdsVmFiMU5XY0RaU2F6bG9ZVEJ3Y1Zkc1ZsTldhekZ6WVVWc1lXVnJjR2haYkZaM1pWWmtSbUZITld4aGVrWktWMnRWTVZZeVNrbGFla0pWWWxoQ2RsZFVTbGRTVm1SWllVWmFhRTFZUVhwV2FrbzBWakZyZVZaclZsVlhSMUphVlRCa2FtVldVbkpYYWxKUFVsUldNRlZ0TVRSaFZrcDFXbnBDVldKR1NreFhWRXBYVWxaYVZWUnNhR2hOVm13elYxWlNSMWxXWkVkaFJXeGhaV3MxVVZVd2FFTldiR1JHWVVjMVRsWlVWbGhhVlZKVFZERmFSbU5FV2xkV1JXdzBWMVJLVjFKV1ZuUmhSbEpYWW10S2NWZHNWbE5oTWtaSFlVVnNZV1ZyU2s5WmExcGhZV3h3VmxWc2NHeFdiVkpIVlRJeFQySkdTa2hWYlRsWVVsZG9kVlJXVlRCbFJsWjBWRzE0VTFKcmNIWldiWEJIVXpGcmVWWnJWbGRXUlhCb1ZXMDFiazFHVW5WalJrNXBVbXRzTTFZeU1VOWlSa3BIVm1wYVdGSlhhSFZVVjNONFl6SldSVlZyT1dsV2EzQnhWMnhXVTFkdFZuTmhSV3hoWldzMVVGUldXbmRUVmxKWFlVZDBWMDFYYUVwWGFrNTNWR3hhZFZwNlFsVmlWRVpNVkd4YVlXTXlWa1ZWYXpscFZsaENjVmRzVmxOV2F6RnpXa2hTVjJKck5WVlphMmh1VFVaU2NscEZkRnBOYkZwR1ZteFNWMWRXVGtoWk0yaFZZbTVDV0ZaVlduSmxWMVpJVkcxNFUxSXdOSHBXTUZadlltc3hWazlXWkd4U1JrcFFXVmQwZDJGc2NGWlZiRXBPVmpGS1NGcFZVbE5VTVZsM1YyczVXbUV4YnpCVWExVXhWMFpLZEZSdGVGTlNhMVkxVm0weE5GbFdWWGhoUld4aFpXdEthRmxyWkZOWFJtUkdZVWMxVGxKdVFsaGFWVkpUVkRGS1NHRkhSbGhTVjJoMVdsZHpkMlZXVm5OaVJteFVVakpPTkZaSE1UQldNVXB6WVVWc1lVMHpRazlXYlRGVFZteFZlV1ZIZEZwTmJGcEdWbXhvYzFZeVNrZGpSMFpZVWxkb2RWUlhjM2hqTWxaRlZXczVVMUp1UW5GWGJGWlRXVmRHYzFkclpGUmlWVFZ6Vld0VmVFNVdXa2hsUkZKUFVsUkZNbFpITVU5aVJrcEhWbGhzVm1KWWFETlhWRXBYVWxaYVZWUnNiRlJTTWs0elZqSjRWMWxXYkZkaFJXeGhaV3RLVUZscmFHNU5SbEowWTBWMFZGWnRhRXBYYm5CSFZESktTVnA2UWxWaE1sSllWbXBHYjFOV2IzcGpSVFZUWW0xamQxWkhOWGRSTVZKSFdrWm9hMUl3TlhOVmExcHlUVVprUm1GSE5VNWlTRUpZV2xWU1UxUXhTWGhUYlhCaFZsWktVMVJYZUc5VFZuQTJVbXMxYVZOSFkzZFdSelYzVlRGU2MxZHNaR3hTUmtwUVdWZDRTMlZHV2xoTlNHaGFUV3hhUmxZeFVsTldSMHBKV25wQ1ZXSkdTbkphUmxwdlUxWndObFJyTlZOV1IzaFhWa1phWVU1Rk5VWk9XRVpXWVRKb1dGUldhRzVOUmxKMFRWWk9hMDFYYUVwWGJuQkxWR3hhZFZwNlFsVmlSa3BvVm1wR1QyTXlWa1ZWYXpsc1lURndiMVpYZEdGT1JUVkdUbFZXV0dKc2NGZFVWbWh1VFVaU2MxVnRSbHBOYkZwR1YxUk9hMVF5U2tsYWVrSlZZa1pLVUZkVVNsZFNWbVIwWkVac1ZGSXlUak5XUnpFMFRrVTFSazVZUm1sU2JFcFVWRlpvYmsxR1VuUmpSVGxPVFZkb1NsZHVjRWRVTWtWNVZGaG9XRkpYYUhWVVZFRXdaVWRXUlZWck9XaGhlbFp4VjJ4V1UxUnRWa2RoUld4aFpXdHdZVmx0TVRSaGJIQldWV3hhVG1KVlZqUmFWVkpUVkRGYVIyTkdjRmhXTTJoVVZXcEdiMU5XY0RaU2JIQlhZbTFqZDFaSGVGTldNV3Q1Vm10V1ZWZEhVbHBWTUdScVpWWlNjbHBJWkZwTmJGcEdWakZTUjJGV1NuSmpSRkpZVWxkb2RWUldWVEZUUjFaSVZHMTRVMUp0ZEROV2FrbzBUa1UxUms1VmFGWmlWVFZ6Vld0YWQyTldXWGxrUjBaYVRXeGFSbFpzVWs5WFJrcDFXbnBDVldKdVFrUlZNRnB2VTFad05sSnJOVTVoYTFwTlZqQldiMkpyTVVaT1ZtUlRZa1phV0ZscldrdFhSbkJZWlVkR1drMXNXa1pXVnpGM1YxWk9TRmt6YUZoV2JGcHlWR3RrU21WSFZrVlZhemxYVWxSV2NWZHNWbE5XYXpGMFZHdGtiRkpHU2s5YVYzaDNWbXhzVlZKcVVrOVNWRVV5V1d0b1QxZFdUa2haTTJoVllsaG5NRlJyVlRGV1ZuQklWRzE0VTFJd05ESldNRlp2WW1zd2VHSkdaRmRYUjNoYVZUQmthbVZzVW5KWmVsWmFUV3hhUmxZeFVrZFhWazVJV1ROc1dHRXhiekJVYTFVeFVsWmtkRlJ0ZUZOU2JGWTJWakZhVjFZeGEzbFdhMVpZWWxoQ1lWWnROVzVOUmxKMFkwWmtXazFzV2taV01qRnpWa2RLUmxOc1dsZGlWRVoyVjFSS1YxSldaSFJsUm14VVVqSk9NMVl5ZEZkWlZsVjRZVVZzWVdWck5VOVphMmhEWVd4d1ZsVnNTazVXYldoS1YycE9kMVZHV25WUmJYQmhWbFpLVkZsVVJtOVRWbkEyVTJ4d1RsZEZTa2xXTUZadlltc3hWazVZVG14U1JrcFFWbXRrVTJGc2NGWlZhelZyVFd4YVNGcFZVbE5VTVZwSVZXMXdZVlpXU2xkVVYzaFRZekpXUlZWck9WTlNNbWhvVmpCV2IySnRWbkpOU0doc1VrWktVRmxYZUV0V01XUkdZVWMxVGxaVVZucGFWVkpUVkcxV2NrNVdVbGhTVjJoMVZGVlZOVkl5VmtWVmF6bFhVakZLY1Zkc1ZsTldhekZIWVVWc1lXVnJTbUZXYlRGVFZrWmFkR1ZFVWs5U1ZGWldWakp3UTFkck1WbGFla0pWWVRGS2FGZFVTbGRTVm1SMFkwWmtVMkp0WTNkV1IzaFRVekZyZVZaclZsVlhSM2hhVlRCa2FtUXhaSE5WYkU1WFRWZG9TbGR1Y0VOVU1rcFlZVVJhVjFaRldUQlVhMVY0VG14R2RGUnRlRk5TVkVGNFZtMXdSMDVGTlVaT1ZtaFRZbFUxYzFWcldrWmtNV1JHWVVjMVRsWlVWbnBhVlZKVFZERmFSMU51UWxkaVJtOHdWR3RWZUU1c1duVmpSbVJYVFRGS2IxZFVTalJPUlRWR1RsaEdWMkV5VWxwVk1HUnFaVlpTY2xadFJtaFNiV2hLVjI1d1ExUXdNVmxhZWtKVlYwaENXRlpFUm5OV01sWkZWV3M1VG1FeGNGbFhiR1EwWkRGcmVWWnJWbGRXUlZwWFdXdG9iazFHVW5OVmF6bFhWbFJHZWxZeU5YZFhhekZaV25wQ1ZXRXhTbkphUkVaelZqSldSVlZyT1ZkU2JrSlpWbFJKZUZJeFdsZGhSV3hoWld0YVVGVnROVzVOUmxKeVZXMUdhMkpHVmpSV01qRlBZa1pLU0ZScVRsaFNWMmgxV2xkek1XTXlWa1ZWYXpsWFVsUldjVmRzVmxOWlYwWnpVbTVPYkZKR1NsQldhMlJUWVd4d1ZsVnNUbWhOVjJoS1YyNXdRMVF4U25WYWVrSlZZa1pLYUZkVVNsZFNWbXQ2WVVac1ZGSXlUalJXUjNCTFRrWlplR0ZGYkdGbGExcFBWRlpvYmsxR1VuTlZiazVhVFd4YVJsWnNVazlYVms1SVdUTmtWV0pZWnpCVWExVXhWbFp3U0ZSdGVGTlNiWGN3VmxkNFlVNUZOVVpPV0ZKVllsVTFjMVZyV25OT1JtUnpXa1JDYTAxWGFFcFhibkJEV1ZkS1IxTnRjR0ZXVmtwWFZGVmFiMU5XY0RaUmF6VnBVMGRqZDFaSE5YZGhNV3Q1Vm10V1dGWkZTbGhaV0hCWFlXeHdWbFZzV2s5U2JXaEtWMjV3UzFReFNuVmFla0pWVjBoQ1VGbFVSbGRTTVdSellVZDRVMUpXY0hGWGJGWlRWbXN4Y2sxWVJsTmliSEJoVm0wMWJrMUdVbk5WYlVaVVRWZG9TbGR1Y0U5VU1WcDFXbnBDVldKSFVraFViWGh2VTFad05sRnJOV2xUUjJOM1ZrZDRVMVl4YTNsV2ExWllWMGQ0Y0ZsVVFuZFhiRmw0V2tSQ1drMXNXa1pXYkZKTFlXc3hXVnA2UWxWaVdFSlFWMVJLVjFKV1dsVlViR3hVVWpKT05GWkdaREJpTWtaellVVnNZV1ZyU2xCVVZtaHVUVVpTZEUxVk9WZFNiV2hLVjI1d1ExbFdTblZhZWtKVllURkthRnBIZUc5VFZtOTZZMFUxYVZOSFkzZFdSM2hUWVRGcmVWWnJWbGRXUlVwYVZUQmthbVF4WkhOaFJUbGFUV3hhUmxac2FHOVhWazVJV2tSYVZWWnNjRXhYVkVwWFVsWnJlbU5HY0doTldFSnhWMnhXVTFkck5VZGlSbVJVWWxVMWMxVnJWWGhPYkd4V1drVmtXR0pWY0VoYVZWSlRWREpHYzFOdGNHRldWa3BQVkZWYWIxTldjRFpSYlVaWFltMWpkMVpIZUZOWlYwVjVWRzVPWVZKc1dscFZNR1JxWlVaU2RHVkhSbGROUkVaSVdsVlNVMVF5U2xaT1YzQmhWbFpLVDFSWGVHRldNbFpGVldzNVYxSXhTWHBXVjNCSFRrVTFSazVZUmxOaWF6VlZXV3RvYmsxR1VuVmpSV1JvVm0xb1NsZHVjRU5VTVZwMVducENWV0pHU2t4WFZscHpWakpXUlZWck5XeGhNMEpRVmpCV2IySnRWbkpOVm1ScFVtMW9UMVp0Tlc1TlJsSnlWVzFHV2sxc1drWldNVkpIVjFaT1NGa3paRlZpUmtwNlZtcEdiMU5XY0RaU2F6Vk9WMGRqZDFaSE1IaFZNV3Q1Vm10V1ZsWkZjRmRVVm1odVRVWlNkR05HWkdwaVIyaEtWMjV3UjFkc1drWk9WbXhZVWxkb2RWUldWVEJsUjFaRlZXczFiR0V3Y0hGWGJGWlRZV3MxUjJGRmJHRmxhM0JQV1ZkMFIwNUdaRVpoUnpWT1VsUnNTRnBWVWxOVU1WcEdUbGh3V2xaV2J6QlVhMVV4WkVaU2MxUnNiRlJTTWxFeVZrWmFZVTVGTlVaT1ZGcFNZbFUxYzFWcldsWmxiR1JHWVVjMVRsWlVWbGhhVlZKVFZESktWMWRxVGxoU1YyaDFWRlJCZDJWSFZrVlZhemxUVFZWWk1GWXdWbTlpYXpCM1RWVmtiRkpHU2xCVmEyUlRZV3h3VmxWc2NHeFNiV2hLVjI1d1ExUXhXbFZXYlRsWVVsZG9kVlJYYzNoamJHUjBWRzE0VTFKc2NIWldSbFpoV1ZkU1JrNVdaR3hTUmtwUVZtdGtVMWxXWkVaaFJ6Vk9WbFJXZWxwVlVsTlVNVXBJWkhwQ1YyRnJjRE5YVkVwWFVsWmFWVk5zYUZOaWJXTjNWa2N4ZDFNeGEzbFdhMVpXVmtVMVdsVXdaR3BsVmxGM1YycFNUMUpVVmtsV1IzaHZZVlprU0dGR2JGaFNWMmgxVkZaVmQyUXhaSFJVYlhoVFVteHdkbGRyV21GT1JUVkdUbGhHVkdFeVVscFZNR1JxWld4U1ZsZHFVazlTVkZaSlZtMHhjMWRXVGtoWk0yUlZZbGhuTUZSclZURmtSbVJ4Vld4a1RtSnNTbkZYYkZaVFZtc3hjMkZGYkdGbGEwcG9XV3RvYmsxR1VuTlZhMlJhVFd4YVJsWkdhSE5XUjBwSlducENWV0V4U25aV2FrWnZVMVp3TmxOc2NHbFhSMmh4VjJ4V1UxWnJNWE5pU0U1b1VucHNXbFV3WkdwbGJGSldWMjVPYWsxWGFFcFhibkJIVjJ4YWRWcDZRbFZoTWxKTVZrUktTMUl5VmtWVmF6bFRUVlp3Y1Zkc1ZsTldhekZ6VjI1T2FGSXdOWE5WYTFweVRVWnNWbGRxVWs5U1ZGWldWVEl4VDJKR1NrZGpTRXBZVWxkb2RWcFhjelZXTWxaRlZXczFiR0pHY0ZsV01GWnZZbXN4YzJORlZsTmlWMmhZVm0wMWJrMUdVblJOVlRsWVlrZG9TbGR1Y0U5VlJrcDFXbnBDVldKR1NsQlhWRXBYVWxaa2RHRkdiRlJTTWs0elZrWmtORTVGTlVaT1ZtaFRZa2RTY0Zac1VrZGhiSEJXVlcxd1QxSnRhRXBYYm5CSFZVWmFkVnA2UWxWaVZFWklWMVJLVjFKV1ZuUmhSbXhVVWpKT05GWkdVa2RVTVVweVRWWmtiRkpHU2xCV2EyUTBWbXhrUm1GSE5VNWlSM1EwV2xWU1UxUXlTbFpPVjNCaFZsWktWRmxyV2xkak1sWkZWV3M1VjFJeWFFVldNRlp2WW0xV2NrNVlUbUZTTURWelZXdGFWbVZzWkVaaFJ6Vk9UVVJHU0ZwVlVsTlVNVWwzWTBkd1lWWldTbGRVVlZWNFkyczFXRlJ0ZUZOU01EUXlWbXBLTkU1Rk5VWk5WRnBWWWxVMWMxVnJXbkpOUm1SWFYycFNUMUpVVmxaV1J6RlBZa1pLUjFKWWFGWk5ha1oyVm0xNGIxTldjRFpUYkhCWFltMWpkMVpIZEd0U01XdDVWbXRXVjFkSVFtRmFWM1JoWVd4d1ZsVnRjR3ROVjJoS1YyNXdRMVF5U2toVmJGcFhZbGhvVkZkVVNsZFNWbHBaWWtVMVUySnRZM2RXUm1oM1ZtMVJlRnBHWkd4U1JrcFFXV3hXZDJGc2NGWlZiSEJPVWxSR1NGZHJaRTlpUmtwSFZsaG9XRkpYYUhWYVYzTjRWbXhrY2s5V2JGUlNNazQwVmtkMFYyUXhhM2xXYTFaWFlsZG9ZVlp0Tlc1TlJsSlpZMFYwYVUxWGFFcFhibkJIVlVaS2RWcDZRbFZpUjFKSVZXMTRiMU5XY0RaVGF6bFRZbTFqZDFaSGRHdFRNa1p5VFZWa2JGSkdTazlhVnpFMFYxWmtSbUZITlU1V1ZGWklXbFZTVTFReVNsZFRiWEJoVmxaS1UxUlhlRzlUVm5BMlVtczVUbGRIWTNkV1J6RjNWakpOZUZwSVRteFNSa3BRV2xjeE5GZEdaRVpoUnpWc1lYcEdlbHBWVWxOVU1sWjBZVWR3WVZaV1NtaFpiRnB2VTFad05sSnJOV3hoTTBKTlZqQldiMkpyTVVaUFZXUnNVa1pLVUZacldrdE5WbVJHWVVjMVRsSnVRbGhWVnpGUFlrWktSMVpZYkZkaVIyaEVXVlZhYTFkRk1WaFViWGhUVWpBME1sWXdWbTlpYlZaeVRWVm9WbUpWTlhOVmExVjRUa1prUm1GSE5VNWlSM2d4V1d0a1QySkdTa2RUYmtwWFlrWnZNRlJyVlRGalZsWjBWRzE0VTFKdGMzZFdNV1EwVGtVMVJrNVdWbGhpVlRWelZXdGFTMkl4VlhsbFJGSlBVbFJXV1ZWdE1VOWlSa3BIVWxob1dsWlhVWGRYVkVwWFVsWmtXV0ZHYkZSU01sRXlWa1phWVdNd01IaGhSV3hoWld0d1QxUldhRzVOUmxKeVZXMDVhMDFYYUVwWGJuQkhWMnhhZFZwNlFsVmlSa3BvVjFSS1YxSldaSFJrUm14VVVqSk9ORlpHWkhwT1ZtdDVWbXRXVjFaRk5XOVpWRVoyWld4a2NsZHFVazlTVkZaV1ZqSXhUMkpHU2tkWGJUbGhVbXh2TUZSclZURldWbVIxVkcxd1UySnRZM2RXUjNSclZqRlNjMkZGYkdGbGExcFFWakJXUzJGc2NGWlZhelZzWWtac05GZHJhR3RYVms1SVdUTmtXRlpzVmpSVmFrWnZVMVp3TmxOdFJtbFRSMk4zVmtjMWQyTXhhM2xXYTFaWFZrVktXbFV3WkdwbFZtUnpWMnQwV0ZKdGFFcFhibkJMVkcxS1NWcDZRbFZpVkVaUVYxUktWMUpXV25SaFJteFVVakpPTlZaRVFtRk9SVFZHVGxaV1YySnJXbFJaYTJodVRVWlNkR05GWkZwTmJGcEdWbGN4TkZZeVJqWlNiWEJoVmxaS2NWUlVSbTlUVm5BMlVtczVUbUZyV2tsWFZsWmhUa1UxUms1V1ZsUlhSMUphVlRCa2EwNXNVbk5YYWxKUFVsUkZNbFZYZUhkWFZrNUlXVE5zV0ZaNlJsTlVWVnB2VTFad05sTnJOVmRpVmtwTlZqQldiMkpyTVVaT1ZtaFVZVEpTVkZscmFHNU5SbEp6VlcwNVdrMXNXa1pXYkZKTFlrZEZlR0pFV2xoU1YyaDFWRlpWTlZkSFVraFNiWEJwVm14d2NWZHNWbE5aVjBaellVVnNZV1ZyV2xCWmEyaHVUVVpTYzFWdE9XaE5WMmhLVjI1d1ExUXdNVmxhZWtKVlltNUNSRmRVU2xkU1ZtUlZWbXhzVkZJeVRqUldSekUwVGtVMVJrNVZWbUZTTURWelZXdGtUbVF4VW5SbFJGSlBVbFJXVmxadGNHRlhWazVJV1ROa1ZXSllaekJVYTFVeFpFWmtkR1ZIYkZkaWJXTjNWa2QwVTFZeGEzbFdhMVphWld4YVdsVXdaR3BsUmxKMFpVUlNUMUpVVmpCVmJURlBZa1pLUjFaWWJGaFNWMmgxVkZaVk1WSXlWa1ZWYXpsb1lUTkNXRll3Vm05aWJWWnlUbFpzVldKVk5YTlZhMXBXWlVac1ZWSnVaRk5OV0VKWldsVmtNRlV5U2tsYWVrSlZZbGhDU0ZkVVNsZFNWbFpWVkd4c1ZGSXlVVEpXUjNoaFRrVTFSazVWYUZkaVZUVnpWV3RhVjA1V1pFWmhSelZPWWtoQ1NGcFZVbE5VTWxaelVsaGtWMDF1YUZoV1ZFWldaVVpXV1dGR2JGUlNNazR6VmtSR2IySXlSbk5oUld4aFpXdEtVRlp0Tlc1TlJsSnpWV3QwV0ZadGFFcFhibkJIVkcxS1NWcDZRbFZpUmtweVYxUktWMUpXWkZWVmJHeFVVakpPTmxaSGVHRk9SVFZHVGxaV1ZtSkdjRnBWTUdScVpVWlNjMWRxVWs5U1ZGVXlXVlZhYTFkV1RraFpNMnhZWVRGdk1GUnJWVEZXVm1SeVlrWmtVMkp0WTNkV1J6QjRWVEZyZVZaclZscGxiRXBYVkZaV2QyVnNXWGhWYTNSYVRXeGFSbFpzVWtkWFZrNUlXa1JhVlZac2J6QlVhMVV4WTFaU1dWcEdiRlJTTWs0MVZrZDRWMWxYVFhsVWJsSlVZbFUxYzFWcldrWk5SbHBJWlVSU1QxSlVWakJXUjNoUFYxWk9TRmt6WkZWaVdHY3dWR3RWTVZOR1NuUlViWGhUVW14WmVsWnFTalJPUlRWR1RsWldZVkl3TlhOVmEyUlBUbXhrUm1GSE5XeGhla1paVlcwMVQyRnNTbk5qUjNCaFZsWktWMVJXWkV0V01sWkZWV3M1YkdFd2NEWldNRlp2WW1zeFZrNVlVazVXTURWelZXdGFjazFHVlhsbFIzUmFUV3hhUmxZeU1UUmhiRXAxV25wQ1ZXRXlVa3hYVkVwWFVsWmFWVlJ0YkZOaWJXTjNWa2Q0YTFJeGEzbFdhMVphWld0YVdsVXdaR3BsUm1SWFYycFNUMUpVVWpWVmJURlBZa1pLUjFKcVZsZGlSMUpNV2taYWIxTldjRFpSYXpWcFZqSm9jVmRzVmxOV2F6QjRWMnRrYkZKR1NsQlZha0poVjFaa1JtRkhOVTVXVkVaNlZqSTFUMVF5U2tkVGJuQmFZVEZ3VkZaVVFYaGphelZZVkcxNFUxSlVRalJXTUZadlltc3hWazVZUmxOaVdGSnhWRlpWTVdGc2NGWlZhelZzVW0xb1NsZHVjRTlVYkVwMVducENWV0V4U25KV1YzaHZVMVp3TmxOc2NFNVhSMk4zVmtkNFUxTXhhM2xXYTFaWFZrVktXbFV3WkdwbFZsSllaVVJTVDFKVVZsWldiVEZQWWtaS1JrMUlhRmhTVjJoMVZGUkJkMlZIVmtWVmF6bFhVbXh3TlZZd1ZtOWlhekZYWWtac1ZHSlZOWE5WYTFwTFkyeGtSbUZITlU1V1ZGWXdWbGN4VDJKR1NrZFNXR3hZVm14dk1GUnJWVEZTVm13MlVteFdhVk5IWTNkV1J6RjNVekZPVjJGRmJHRmxhMHBQV1d0b2JrMUdVbk5WYlRsYVRXeGFSbFp0TVc5V01WcHlZMFpXV0ZKWGFIVlVWbFV4VWxaT2NscEdiRlJTTWs0MlZrWlNSMVF4YTNsV2ExWllZbGhTY1ZWdE5XNU5SbEowWTBWa1YwMVdjSHBhVlZKVFZERkpkMWR0Y0dGV1ZrcGhXbFZhWVZJeVZrVlZhemxYVW01Q2NWZHNWbE5XTWtaSVUxaG9iRkpHU2xCV2ExVXhWMFpyZDFkcVVrOVNWRVV5VmpKNFYyRldTbFpqUmxKWVVsZG9kVlJWV25kU01sWkZWV3M1VTFJeFNuRlhiRlpUWVcxV2RGWnVUbGRYUjNoeVZXNXdjMk14YkhOWGFsSlBVbFJXUmxZeU1VOWlSa3BIVmxod1dGSlhhSFZVVmxWM1pVZEdTR1JIYkZOaE0wSnhWMnhXVTFSdFVYZE9WbVJzVWtaS1VGcFhjekZoYkhCV1ZXeGFUbFl3VmpSYVZWSlRWREZaZDFkck1WaFNWMmgxVkZkek1WSnNaSFJVYlhoVFVtMTBNMVpYTVRST1JUVkdUbGhHVTJKVk5YTlZhMXBHWld4U2MxWlVSbHBOYkZwR1ZteG9jMVl4U2xkalIzQmhWbFpLY2xsVldtdGpNVnAwVkcxNFUxSnNXVEZXYkZKSFZXMVdSMVJ1VG14U1JrcFFWV3RhZDJGc2NGWlZiRnBPVFZkb1NsZHVjRXRaVmtwMVducENWV0p1UWtSWlZWcGhZekZrY21SR1pGTmlXR2h4VjJ4V1UxWnJNSGxXYTJSc1VrWktVRmxzV25kaGJIQldWV3hhYkdKR2NIcGFWVkpUVkRKV2NsTnRjR0ZXVmtwUFZGZDRiMU5XY0RaU2F6VnBWMFV4TkZZd1ZtOWlhekZ6WVROb2JGSkdTbEJXYTFwM1YxWmtSbUZITld4aGVteEdWVzE0YTJGSFNrbGFla0pWWVRKU1dGZFVTbGRTVm10NlkwWnNWRkl5VGpSV1JtaDNVakZyZVZaclZsaGlWM2hhVlRCa2FtVnNVWGhYYWxKUFVsUldWbFl5TlV0WFZrNUlXVE5vVldKWVp6QlVhMVV4VmxkR1NGUnRlRk5TYkZZMVZsZDRZVTVGTlVaT1ZGcFNZbFUxYzFWcldtRmlNVnB6Vld0T2FFMVhhRXBYYm5CTFYyeFplRmR1Y0ZoU1YyaDFWRlpWZUdNeFduTlZiR3hVVWpKT05WWXhaSGRqTVd4WFZXeG9iRkl3V2xwVk1HUnFaREZTZEdWRVVrOVNWRlpXVjJ0YWMyRnNTblZhZWtKVllrWktjbGRVU2xkU1ZscFZWR3hzVkZJeVRqUldSekY2VFZacmVWWnJWbFpXUmtwWlZtMDFiazFHVWxsalJUbHJUVmRvU2xkdWNFZFVNVnAxV25wQ1ZXSllRa2hYVkVwWFVsWmtkR0pHYkZSU01rNDBWa1JHWVU1Rk5VWk5WRnBTWWxVMWMxVnJXbFprTVdSR1lVYzFUbUpIZUhwYVZWSlRWREZhUjFkdGNHRldWa3BQV2xWYWNtVkhWa1ZWYXpsWFVtNUNlVmRyVm1GVk1XdDVWbXRXV0dKWVVscFZNR1JxWld4UmQxZHJPVnBOYkZwR1ZteG9jMWRXVGtoWk0yeFlZVEZ2TUZSclZURk9iSEJJVkcxNFUxSlVSVEJXTUZadlltc3hWazVXVmxOaVZUVnpWV3RhY21ReFpFWmhSelZzWVhwQ05WWldhR3RYVms1SVdrUmFWVTFXY0doWFZFcFhVbFprV1dKR1VsTmliV04zVmtkMGExWXhhM2xXYTFaWVlsaENXbFV3WkdwbFJsSllaVVJTVDFKVVZrWldNblF3VjFaT1NGa3phRlZXVm5BelZqQmtVMU5XY0VoaFJteFVVakpPTlZZeFVrZE9SVFZHVGxSYVVtSkhVbHBWTUdScVpVWlNjMWRxVWs5U1ZGWXdWbGN4VDJKR1NrZFNXR3hZVWxkb2RWUlhjelZXTWxaRlZXczVWMUp1UW5GWGJGWlRXVmRGZUdGRmJHRmxhM0JSVld4b1ExZFdiSFJPVlU1V1VtMW9TbGR1Y0VkVU1VcEdZMFpvV0ZKWGFIVlVWbFV4WkVaS2RGUnRlRk5TTVVwMlZtdGtORTVGTlVaT1ZsWldZbGRvV2xVd1pHdE9iRkpZWlVSU1QxSlVWa2xXVm1odlZqRktkRlJxVWxkV1JYQlVWVEJhVjJOc1duTlViR3hVVWpKT05WWXlkR0ZPUlRWR1RsUmFVbUpyU2xwVk1HUnFaVVpTZEdWRVVrOVNWRlpHVjJ0U1UxZFdUa2haTTNCVlRWWnZNRlJyVlRGV1ZtUnpWMnhzVkZJeVRqUldNVnBoVGtVMVJrNVZhRmhpVlRWelZXdGFWMDVzVWxobFJGSlBVbFJXVmxZeWVITldhekZZWVVoYVdGSlhhSFZVVjNoeVpVWk9jbHBHVW1sVFIyTjNWa2Q0VTFFeGEzbFdhMVpYWWxkb1dGcFhkR0ZWVm1SVlVXMUdXazFzV2taV2JHaHZZa2RLU1ZwNlFsVmlXRUpNVldwR2IxTldjRFpSYlVaWFltMWpkMVpIZEd0WlZtdDVWbXRXVm1KWVVscFZNR1JxWkRGU2NWSnFVazlTVkZVeVdWVmtUMkpHU2toVmJUbFhUVzVuTUZSclZURldWbHB6Vkd4c1ZGSXlUalJXUmxKSFRrVTFSazVXVmxaaVZUVnpWV3RWZUU1R1pFWmhSelZPVW0xNFdGcFZVbE5VTVVwSVlVZHdZVlpXU2xkVVZscHZVMVp3TmxOdFJsUlNWWEJ4VjJ4V1UxZHRWa2RYYms1c1VrWktVRlpyV25kaGJIQldWV3hPYUZKc2NFaGFWVkpUVkRGYVNHVkdiRmhTVjJoMVZGUkJOVk5GT1ZoVWJYaFRVbXhaTWxZd1ZtOWlhekZXVGxoV1VsWkZjRmRXYlRWdVRVWlNkRTFXVGxOTmExcElXbFZTVTFReFNYaFRhM0JZVWxkb2RWUlZWWGhqTWxaRlZXczViR0V4Y0hGWGJGWlRWbXN3ZVZOclpHeFNSa3BRVm10YWQxWldXbk5YYWxKUFVsUldNRlpYTVU5aVJrcEhWbGhzV0ZKWGFIVlVWVlV3WlVkV1JWVnJPV2hoTVhCSVZqQldiMkpyTVhOaE0yaHNVa1pLVUZsWGRHRmpNV3hWVW1wU1QxSlVWa2xWYlRGdlZqRktjMk5IY0dGV1ZrcFhWRlphYjFOV2NEWlViRUpUWW0xamQxWkhNWGRVTVVsNFlVVnNZV1ZyTlU5VmJUVnVUVVpTZFdORk9WaFNiV2hLVjI1d1MxbFdaRVpUYmxwWVVsZG9kVlJXVlRGa1JURllUMVpTYVZJeFNuRlhiRlpUV1ZkS1NGUnJaR3hTUmtwUVZXcEdkMkZzY0ZaVmJGcE9VbFJHVjFrd1pFOWlSa3BJVkZob1dGSlhhSFZVVmxwelZqSldSVlZyT1U1aE1YQkZWakJXYjJKck1WWk9WbVJzVWtaS1VGbFhkR0ZsVm1SR1lVYzFUazFFUmtoYVZWSlRWREZLU0dGSGNHRldWa3BYVkd4YWIxTldjRFpTYXpsVFZtNUJlVll3Vm05aWF6RldUVWhvV0dKdFVsQlphMVV4WVd4d1ZsVnRSbWhpUjJoS1YyNXdUMVJzU25WYWVrSlZZVEpTV0ZkVVNsZFNWbVJaWVVac1ZGSXlUalZXTVZKSFkyMVdWMkZGYkdGbGExcFFXV3RvYmsxR1VsbGpSVTVhVFd4YVJsWnNVa3RYVms1SVdUTnNXR0pZWnpCVWExVXhZMVpPZEZSdGVGTlNia0ozVmtaYVlVNUZOVVpPVkZwVllsVTFjMVZyV25OT2JGWnpXa1pPV2sxc1drWldNakYzVm0xS1NWcDZRbFZoTVVwb1ZYcEdiMU5XY0RaU2F6VlRZbTFqZDFaSGVGTmpNV3Q1Vm10V1YxWkZOVnBWTUdScVpXeFJkMWRxVWs5U1ZGWldWMnRrZDFkV1RraFpNMlJWWWxSR1ZGZFVTbGRTVmxaVlZHeHNWRkl5VGpSV1IzaGhZakpGZVZKclpHeFNSa3BRVm10YWQwMUdiRlpYYWxKUFVsUldTVlZ0TVU5aVJrcEhWbGh3V21KWVp6QlVhMVV4VG14R2MxRnNiRlJTTWs0MFZrZDBhbVZHYTNsV2ExWldZbGRvVlZadE5VTmhiSEJXVlcxMGFGSnJXbnBhVlZKVFZERmFSMWR1UWxoU1YyaDFWRlpWTVZJeVZrVlZhemxUVW01Q2NWZHNWbE5YYXpWSFYydGtiRkpHU2xCV2ExcExZV3h3VmxWc1NteFdNREUxVmtjeFQySkdTa2RXV0hCWFVtMW9lbGRVU2xkU1ZtUlZVV3hzVkZJeVRqTldSM0JIVGtVMVJrNVVXbWhUUlRWWVdXdG9iazFHVW5OVmJUbFNUVmRvU2xkdWNFOVViRnAxV25wQ1ZXSkdTbkpYVkVwWFVsWmtkR05HYkZSU01rNDBWa2N4TkU1Rk5VWk9WbFpWWWtad2IxcFhkRXRoYkhCV1ZXMXdUMUpzY0ZsYVJXUXdWMVpPU0ZremJGaFdSVnBNVjFSS1YxSldWbFZUYkZKcFUwZGpkMVpIZUZOUk1WcHpZVVZzWVdWcmNHRldiVFZ1VFVaU2NsVnRSbHBOYkZwR1YxaHdUMWRXVGtoWk0yeFZWbXh2TUZSclZURmtSbEowVkcxNFUxSXdOSHBXYlRFMFZqRnJlVlpyVmxoaVdFSlZXV3hvYjFkR2JGVlNibVJZVm0xb1NsZHVjRWRYYkZwelYyeFNWMVpGV1RCVWExVXhWbFpXV1dGR2JGUlNNazR6VmtSR2IyRXhhM2xXYTFaV1lsaG9XRmxyV25kV2JHUkdZVWMxVGxaVVZqRlpNR1JQWWtaS1IxWnFWbFZoTVhCeVYxUktWMUpXV2xWVWJHeFVVakpPTmxaSGRHRk9SVFZHVGxSYVZXSllRazlaYTJodVRVWlNjMVZ0UmxOaVJuQlpXa1ZrVDJKR1NrWk5SRVpZVWxkb2RWUlhjelZUUms1MFZHMTRVMUpyVlhkV01GWnZZbXN4UmsxWVRteFNSa3BRV2xkMFlXRnNjRlpWYkZwT1RWZG9TbGR1Y0V0WGF6RlhZMFpXV0ZadFVqWmFWV1JUVWpGYWRGUnRlRk5TYmtKNFZqQldiMkpyTVhOaE0yaHNVa1pLVUZacldtRmpSbXhaWTBaa1drMXNXa1pXYlRGdlYxWk9TRmt6YUZWaVJrcEVWMVJLVjFKV1pGVlJiV2hwVTBkamQxWkhNWGRXTWsxNFlVVnNZV1ZyV2s5WmJYUjNWMVpzV0dWRmRGcE5iRnBHVmxjd2VGZFdUa2haTTJoVlZqTm5NRlJyVlRGV1ZsWjBWRzE0VTFKc1ZqVlhiRlpoV1Zaa1JrNVdaR3hTUmtwUVdXeFdkMkZzY0ZaVmJGcE9UVlp3ZVZSc1pFOWlSa3BIVWxSQ1YwMVdiekJVYTFWNFRteFNkVnBHYkZSU01rNDBWa2Q0YTFNeFNYbFRhbHBTWWxVMWMxVnJXbFprTVdSR1lVYzFUbUpIZUhwYVZWSlRWREZhUjFacVVsZFNla1V3V1ZSR2ExSXlWa1ZWYXpsb1lUTkNTVmRYZEdGT1JUVkdUbFpXWVZJd05YTlZhMXBYVGxaa1JtRkhOVTVTVkZaWFdUQmtUMkpHU2toVVdIQlhZV3RaTUZSclZURldWbVIwVW14d1YySnRZM2RXUjNSclZqRktjMkZGYkdGTk0wSlFWbTAxYmsxR1VuSlZiVVpWVFZkb1NsZHVjRWRWUmtwMVducENWV0pHU2t4WFZFcFhVbFphVlZSc2JGUlNNazQxVmtaa05FNUZOVVpPVmxaWFlsVTFjMVZyVlhkbFJtUkdZVWMxVGsxRVFqUmFWVkpUVkRGYVIxZHViRmROYm1jd1ZHdFZNVTVzVG5SVWJYaFRVbTEwTTFaR1dtdFZNVWw0WWtaa2JGSkdTbEJWYTJST1pVWmFTR1ZFVWs5U1ZGWjRWVzF3WVZkV1RraFpNMmhWWWxobk1GUnJWVEZXVjBaSVVteGtWMkp0WTNkV1IzaFRVekZyZVZaclZsZFhTRUphVlRCa2FtVkdVbkpYYWxKUFVsUkZNbFV5TVU5aVJrcEhWbGhzV0ZKWGFIVlVWRUV4VWpKT1JtSkdiRlJTTWs0elZrWmtORll4VW5OaFJXeGhUVE5DVDFsdE1XOVdiR1JHWVVjMVRsWlVWa2xaTUZaUFlXc3hjazFVVmxkaVdHY3dWR3RWTVZKV1duUlViWGhUVW14V05GWXdWbTlpYXpGellraE9iRkpHU2s5YVZ6RTBWbFprUm1GSE5VNVdWRVo2V2xWU1UxUnRWbkpYYTNoWVVsZG9kVlJVUVhoV01sWkZWV3M1VjFJeFNuRlhiRlpUV1ZkR2MxZHVUbFZpVlRWelZXdGFWbVZHWkVaaFJ6VnNZWHBHZWxwVlVsTlVNVXBIWTBkd1lWWldTbkZhVjNoaFZqSkdTRTlXYkZSU01rNDFWakZTUjA1Rk5VWk9WbFpVWVRKU1dsVXdaR3BrTVdSWFYycFNUMUpVVmxaVlZ6RlBZa1pLUjFaWWFGaFNWMmgxVkZkNGMyTXhaSFJVYlhoVFVqQXhObFl4V210T1IxRjRWMjVPYkZKR1NsQldhMXBoWVd4d1ZsVnRSbWhpUlRVd1dsVmFUMkZXV1hsaFJYaFlVbGRvZFZSV1ZUQmxSMVpGVldzNWFWWnNjSEZYYkZaVFlXMVJlRkpZYUd4U1JrcFFWbXRrVTJWV1VsZFhiVVphVFd4YVJsWlhNVEJYVms1SVdUTm9WVTFHV2t4WFZFcFhVbFprV1dGR2JGUlNNazQxVmtaa01GbFhVWGhoUld4aFRUTkNVRmxyWkRSaGJIQldWV3hhVG1KSGFFcFhibkJIVjJ4YU5tSkdWbGhTVjJoMVZGWlZNV1JXUm5SVWJYaFRVbFJDTlZac1VrZE9SVFZHVGxoU1ZXRXdOVnBWTUdScVpVWlNjVkpxVWs5U1ZGWjRWVEkxVTFkck1IbFZiWEJoVmxaS1YxUlhlRXBsUjFaRlZXczFiR0V3Y0hGWGJGWlRZV3MxUjFkdVRteFNSa3BQV2xkMGQxTkdXbkZTYWxKUFVsUldlRlZ0ZEdGaFZrcDFXbnBDVldKWVFraFphMlJHWld4R2RHRkdiRlJTTWs0MFZrUkdhMDFHYTNsV2ExWllWa1pLV2xVd1pHcGxWbVJ6Vmxob1drMXNXa1pXVmxKTFZtMUtTVnA2UWxWaWJrSllXVmQ0YjFOV2NEWlJhemxYVFZWd2NWZHNWbE5XTWtaSFlVVnNZV1ZyU21oVmFrNXZZVVprUm1GSE5VNVNWRlo2VjJ0a1QySkdTa2RXV0dSWFVqTm5NRlJyVlRGa1JtUjBZVWRzVjFadVFuRlhiRlpUVm1zeGMyRkZiR0ZsYTNCUFZGWm9iazFHVW5KVmJYUmFUV3hhUmxkWWNFTldNa3BHWTBkd1lWWldTbWhaVmxVeFZqSldSVlZyT1ZOTlJGWmFWakJXYjJKck1WWk9WVnBxVW0xb1YxbHJXbmRoYkhCV1ZXMUdhRll4V25wYVZWSlRWREpHY21ORmJGcGhNVlY0VmpCYVNtVldVbkZVYkdScFUwZGpkMVpIZEZOaE1XdDVWbXRXVlZaRlduSlVWM1JoWVd4d1ZsVnRSbWhOVjJoS1YyNXdRMVF5U2tsYWVrSlZZa1pLYUZkVVNsZFNWbFowVFZac1ZGSXlUalJXUjNSaFdWWnJlVlpyVmxkV1JYQmhWbTAxYmsxR1VuUk5WazVhVFd4YVJsWnNhSE5YVms1SVdUTmtXRlpGV1RCVWExVXhWbFphV1ZwR2JGUlNNazQxVmtSQ1lVNUZOVVpPVldoWVlsVTFjMVZyV25OT2JHUkdZVWMxVGxKVVZucGFWVkpUVkRKR2MxTnRjR0ZXVmtwVFZGZDRjMVpzY0VoVWJYaFRVbFJDTkZaclpEUlRNVnBYVm01T2JGSkdTazlhVjNoTFlXeHdWbFZzWkdoU2JIQllXbFZTVTFReFdrWmpSbFpZVWxkb2RWUldWVEZTVmtweVkwZDBUbGRIWTNkV1IzUnJWakZrUjJGRmJHRmxhelZQVldwQ1lXRnNjRlpWYkZwT1lrZG9TbGR1Y0VkVU1rcEpXbnBDVldFeVVraFdiRnByVmpKV1JWVnJPV2xXVkZaeFYyeFdVMVl5UmtkaFJXeGhaV3R3YUZscmFHNU5SbEp6VldzNVdrMXNXa1pXYkZKTFYxWk9TRmt6Y0ZWV1ZtOHdWR3RWZUU1c1pITlRiV2hzWWtad00xWXdWbTlpYXpGV1RVaGtZVkl3TlhOVmExcHpUbXhrUm1GSE5VNU5SRkkwVmpKMGIxZFdUa2haTTNCVllURnZNRlJyVlRGV1ZsSjBWRzE0VTFKc1dURldNRlp2WW0xV2NrMVdaR3hTUmtwUVdXeFdkazFXWkVaaFJ6Vk9WbFJXZWxwVlVsTlVNa3BXWTBab1dGSlhhSFZVVmxVeFl6SldSVlZyT1doaE0wSmhWakJXYjJKck1VWk5XRTVzVWtaS1VGWnFRbUZXTVZKV1drWk9XazFzV2taV01qRnZWMVpPU0ZremJGVmlSbHBvVmxSR2ExWXlWa1ZWYXpsb1lUTkNjVmRzVmxOVmF6RllWV3RrYkZKR1NsQldhMVpMVjBac2MxZHJXbXhTYkhCWVdsVlNVMVJ0Vm5KaVJGSllVbGRvZFZSVlduZGpNbFpGVldzNWFHRXpRa2xXVkVvd1lUSkdSazFJYUd4U1JrcFFXVmN4YjJGc2NGWlZiRnBQVW14YWVsZHJaRTlpUmtwSFlYcENZVkpzYnpCVWExVXhWbFpXYzJGR2JGUlNNazQyVmtab2QxSXlSbkpOV0U1c1VrWktVRlpyV25kU01XUkdZVWMxVGxaVVZsbGFSV1JQWWtaS1JrMUVSbHBoTWxKTVZURmFSMk15VmtWVmF6bHNZVEZ3Y1Zkc1ZsTldhekI0WVVWc1lXVnJjR0ZVVmxwM1lXeHdWbFZzV214aVIyaEtWMjV3UjFRd01WbGFla0pWWWxSR1MxcEVSbTlUVm5BMlZHeENVMDFHY0hGWGJGWlRWV3N4V0ZOclpHeFNSa3BRV1ZkMFlXTXhaRVpoUnpWT1lrZDRlbHBWVWxOVU1sWnlVMnhPV0ZKWGFIVlVWbFV4WXpKV1JWVnJPV2xXYTFZMFZqQldiMkpyTVhOalJtUnNVa1pLVUZWcVJrdGhiSEJXVld4S1RtSkhhRXBYYm5CSFZHMUtjMU51UmxoU1YyaDFWRlZWTVZZeVZrVlZhelZzWWxob2NWZHNWbE5XTWtaSFZXeGtiRkpHU2xCWmJGVXhZVVpXZEdWSFJscE5iRnBHVmtab2MxUnNXblZhZWtKVlltNUNVRmRVU2xkU1ZscFZWRzFvYkdFeGNHaFdNRlp2WW1zeFYySkdaR3hTUmtwUVZGZDBZV0ZzY0ZaVmJFcHNWbTFvU2xkdWNFZFVNVnAxV25wQ1ZXSllRa3hYVkVwWFVsWmtkR1ZHU21oTk1taHhWMnhXVTFack1IaFhhMlJzVWtaS1VGVnFRbUZoYkhCV1ZXeGFUazFYYUVwWGJuQkhWRzFLU1ZwNlFsVmlSa3BvV1ZSR1lWWXlWa1ZWYXpsWFVtdHdOVmRVUW1GT1JUVkdUbGhHYVZKck5WUldiWGhoWVd4d1ZsVnJOV3hTYldoS1YyNXdSMVF5U2tsYWVrSlZZa1pLV0ZkVVNsZFNWbHAwWVVaV1RsWnNjSEZYYkZaVFZHMVdWMkZGYkdGbGExcFFXV3RvYmsxR1VuTlZiVGxYVW0xU1NsVlhNVTlpUmtwSFYyMDVWMUpzYnpCVWExVjRUbXhLZEZSdGVGTlNhM0IyVmpCV2IySnJNVlpOV0U1c1VrWktVRlpyWkRSaGJIQldWVzFHYUdKSGFFcFhibkJMVkRGS2NrNVhjR0ZXVmtwaFdsZHplRll5VmtWVmF6bHNZVEJ3U1ZadE1UUk9SVFZHVGxoU1ZXRjZiRzlWYlRWdVRVWlNjMVZyZEZwTmJGcEdWa1pvYjFkV1RraFpNMlJZVm14dk1GUnJWVEZTVjBwSFYyeHNWRkl5VGpWV01WSkhUa1UxUms1WVJsVmlWVFZ6Vld0VmQyVkdaRVpoUnpWT1ZsUkNORnBWVWxOVWJWWnlWMjF3WVZaV1NsUlphMXB2VTFad05sRnJPVTVYUjJOM1ZrZDRVMVF4YTNsV2ExWllZbGhvV2xVd1pHcGxSbVJYVjI1a1drMXNXa1pXYkZKTFYxWk9TRmt6YkZoaE1sSjJWbFZhYTJOc1duUlViWGhUVW14d2RsWldVa2RPUlRWR1RsaEdWbUV5VWxwVk1HUnFaV3hTVmxadE9XbFNiV2hLVjI1d1ExUXdNVmxhZWtKVlltNUNWRmRVU2xkU1ZscFpZMFprYVZOSFkzZFdSM2hUVlRGcmVWWnJWbGRXUlZwelZtMHhVMWRXY0VaWGFsSlBVbFJXTUZZeU1VOWlSa3BIVmxoc1dGSlhhSFZhVjNONFl6Rk9jbUpHYkZSU01rNDBWa1pTUjA1Rk5VWk9XRkpYWVRBMVdsVXdaR3BsVmxKWFYycFNUMUpVVmtsV1ZtaHJWMVpPU0ZrelpGaFdiRlY0Vm1wR2IxTldjRFpUYkhCcFVsaENjVmRzVmxOV2F6QjRZVVZzWVdWcmNGQlZiWGgzWTJ4c05sTnJaRnBOYkZwR1ZsWlNTMVpYU2tsYWVrSlZZa1pLVkZkVVNsZFNWbVJaWWtaa1dGSlZjSEZYYkZaVFZHMVJlR0ZGYkdGbGExcFFXV3RrVTJGc2NGWlZhelZzVW0xb1NsZHFUbmRVTVVsM1kwVm9XRkpYYUhWVVZWVXhWMWRLU0ZKc1VsTk5WWEJ4VjJ4V1UxWnJNVWRoUld4aFpXdEthRlZ0Tlc1TlJsSnpWVzFHVkUxWGFFcFhhazUzVkRKS1NWcDZRbFZpUmtwNlZteGFiMU5XY0RaUmJIQlhWMFpLY1Zkc1ZsTldhekI0VjFob2JGSkdTbEJWYWtKaFlXeHdWbFZzU2s5V2JXaEtWMjV3UzFSdFJYbFZiWEJoVmxaS2NWUlZXbTlUVm5BMlUyeENWMDFHY0hGWGJGWlRWRzFSZUdGRmJHRmxhelZQVlRCa05HRnNjRlpWYkZwT1lrZG9TbGRxVG5kVWJVcEpXbnBDVldKdVFsUlhWRXBYVWxaa2RFMVdiRlJTTWs0MFZrY3hORTVGTlVaTlZGcFVZWHBzV2xVd1pHcGxSbEYzVjJwU1QxSlVWbFpXTWpWUFZqSktTVnA2UWxWaE1sSllWbFJCZUdSWFJraFViWGhUVWpBME1GWXdWbTlpYXpGV1QxWm9hMUo2YkZwVk1HUnFaVlprYzFaWWFGTk5WbG94Vmxkek1WZFdUa2haTTJoVllXdEthRmRXV2xOV01sWkZWV3M1YVZaVVZuRlhiRlpUVmpKR1IyRkZiR0ZsYTBwUVdXdG9iazFHVW5OVmJYUmFUV3hhUmxac1VsTlhWazVJV1ROd1ZWWldWVEZYVkVwWFVsWmFXV05IYkZkV2JUazBWakJXYjJKck1WWk9WV2hQVmpBMWMxVnJXa3RpTVdSR1lVYzFUbUY2UmxoWGEyUlBZa1pLUjFKWWNGaFNWMmgxVkZSQk5WSXlWa1ZWYXpsWFVtdHdjVmRzVmxOV2F6RkhZVVZzWVdWcmNHRldiVFZ1VFVaU2NsVnJkR3hpUjNRMVdsVmtUMkpHU2toVWFrNVdZbGhuTUZSclZURlRSbFp6V2tac1ZGSXlUalZXTVZKSFZURlZkMDFZU2s5V01EVnpWV3RWZUU1c1duUmxSRkpQVWxSRk1sVXhhRzlYVms1SVdrUmFWV0V4VlhoWFZFcFhVbFpXVlZKck9WZGliV04zVmtkMFUxbFdVWGhYYkdSc1VrWktVRlpyV25kaGJIQldWV3hhVGxKdGVGaGFWVkpUVkcxV2NsTnRjR0ZXVmtweFdrUkdZV014V25SVWJYaFRVbTVDZVZZd1ZtOWlhekIzVFVob2JGSkdTbEJhVnpGdllXeHdWbFZzY0d4aVJYQjZXbFZTVTFReVZuSlRiWEJoVmxaS2NWcFhlRnBsUjFaRlZXczVhVlpzYjNwV01GWnZZbXN4Y2s5VlpGaFhSMUphVlRCa2FtVkdaRmRYYWxKUFVsUlNOVlZ0TVVkV01WcHlZMGR3WVZaV1NsZGFWM2hoVWpKV1JWVnJOV3hoTTBKeFYyeFdVMVZyTVhOaFJXeGhaV3MxVUZWcVJtRlRWbVJHWVVjMVRrMUVSa2xWYlRGUFlrWktSMVpZYkZkaVdHY3dWR3RWTVZOR1NuVmhSbVJUWWtoQ2IxZFhjRWRPUlRWR1RsWldWV0pIVWxwVk1HUnFaV3hTVmxWdFJscE5iRnBHVm14U1ExZFdUa2haTTJ4WVZqTm5NRlJyVlhoT2JVcEhZVVp3YVZOSFkzZFdSekI0VlRGcmVWWnJWbGhYU0VKeVZGWmFkMU5XVW5OaFIzUldZa2RvU2xkcVRuZFViVXBHWTBSYVdGWnNiekJVYTFVeFVsWmFkRlJ0ZUZOU2JrSjRWakZhYTFZeGEzbFdhMVpZWWxkNFdsVXdaR3RPYkZKelYydGtWMDFYYUVwWGJuQkxXVlpLUjFkdGNHRldWa3BvV1d0YVUxWnNaSFJVYlhoVFVteFpNVmRyVm1GT1JUVkdUbFZvVm1KVk5YTlZhMXBXWld4V2RHVkVVazlTVkZaWlZXMHhUMkpHU2tkVGJrcGFZVEZ2TUZSclZURlhSa3AwVkcxNFUxSnJWalZXTUZadlltc3hWazVJYUd4U1JrcFFWbXRrYjAweFpFWmhSelZPVW01Q2VscFZVbE5VTVZwSVZXeG9WMUl6VW5aWFZFcFhVbFphVlZac2JGUlNNbEV5VmtaU1IwNUZOVVpPVkZwU1lsVTFjMVZyV2xabFJtUllaRWQwYVUxV2JEUmFWVkpUVkRGYVNHVkhjR0ZXVmtwWFZGZDRhMk15VmtWVmF6bHBWbTVDY1Zkc1ZsTldhekI0VjJ4V1UySlZOWE5WYTFwR1pVWmtSbUZITlU1aGVrWjVWbTF3UTFkV1RraFpNMmhWWVRGd1RGZFVTbGRTVmxwVlZXeEtXRkl6YUZwV01GWnZZbXN4YzJKSVVtaFNNRFZ6Vld0a1QwNVdaSEpYYWxKUFVsUkZNbFZYTlhkaVJrbDNZMGR3WVZaV1NrOWFWM2h2VTFad05sTnNjRTVXTVVwMlZqQldiMkpyTVhOaVNFcHFVbXhhV2xVd1pHcGxSbEp6VjJwU1QxSlVWakJWYlhSUFYwZEtWMUpxVWxoaE1YQnlWMVJLVjFKV1dsVlJiV3hYWW0xamQxWkdhSGRXTVd0NVZtdFdXR0pYYUZwVk1HUnFaVVpTV0dWRVVrOVNWRlpXVmxjMVMxZFdUa2hhUkZwVlZteHdhRmRVU2xkU1ZscFZWRzF3VTJKdFkzZFdSM1JUVkRGcmVWWnJWbGhYUjJoYVZUQmthbVZXWkZWVGJFNVVVbTEwTTFsVlpFOWlSa3BIVm1wV1dGWnNiekJVYTFVeFZsWmtkRlJ0ZUZOU2JGWTJWakJXYjJKck1WWk5XRlpZWWxWYVdsVXdaR3BsUmxKMFpVaGtXazFzV2taV1ZtaDNWMVpPU0ZremFGVmlXR2N3Vkd0Vk1WSldaSFJVYlhoVFVtdHdlbGRyVm1GVk1XdDVWbXRXV0dKWVVuTlZiWE14WVd4d1ZsVnNXbXhXVkVaR1ZsZHdZVll5Um5KVGJYQmhWbFpLVjFSWE1VcGxSMVpGVldzNWFHRXpRbkZYYkZaVFdWZEdWMkZGYkdGTk0wSlBWbTAxYmsxR1VuVmpSWFJhVFd4YVJsWlhNVFJXTWtwWllVZHdZVlpXU2xkVVZWcHpZekpXUlZWck9WZFNNbWhGVmpCV2IySnJNWEpQVldSc1VrWktVRlpyV25kaGJIQldWVzFHYVZJd05VaGFWVkpUVkRGYVNGVnRPVnBoTVc4d1ZHdFZNVTVzUm5SVWJYaFRVbXhXTlZadGVHRk9SVFZHVGxoU1ZtSnRVbHBWTUdScVpERmtjMWRyZEZwTmJGcEdWbXhTVDFkV1RraFpNM0JWVFVadk1GUnJWVEZPYlVaSFkwZDRhRTFxYTNwV01GWnZZbXN4Y2sxWVNtRlNiVkpZVkZab2JrMUdVbk5WYXpsYVRXeGFSbFpzVWtOV1YwcEpXbnBDVldKR1NsUlhWRXBYVWxaYVZWTnNiRlJTTWxFeVZrWlNSMDVGTlVaT1dFWmhVakExYzFWclZYaE5NV1JHWVVjMVRsWlVWa2xhUlZwaFYxWk9TRnBFV2xWV2JHOHdWR3RWTVZaV1RuTmFSbXhVVWpKT05sWkdWbGRpTVd0NVZtdFdWMVpGU25CV01HUnZWbFprUm1GSE5VNVdWRVl3V2tWb2ExZFdUa2haTTNCVlRVWndhRmt5ZUZkamJIQklWRzE0VTFKcmNIcFdWM2hUVmpGSmVHRkZiR0ZsYTBwb1ZtMDFiazFHVW5OVmJHUmFUV3hhUmxac1VrdFhWazVJV1ROb1ZXRXhiekJVYTFVeFkxWk9jMWRzYkZSU01sRXlWa2Q0YjFReFduUlNXR2hzVWtaS1VGWnFRbUZoYkhCV1ZXeEtUazFXU25wYVZWSlRWREZLUjJOSGNHRldWa3BoVkZWYWIxTldjRFpSYXpscFUwZGpkMVpITVhkU01XdDVWbXRXVmxaRk5WQldiVFZ1VFVaU2NscEdaRlpOYTNCYVZsY3hUMkpHU2taTlNHUlhUVzVuTUZSclZURldWbHB6Vkd4c1ZGSXlUalJXUmxKSFZURnJlVlpyVmxWWFIyaGFWVEJrYW1WR1pGZFhhbEpQVWxSV1JsWXlNVTlpUmtwSFUyNUtWMDFHV2t4WlZWcHpZekpXUlZWck9WTlNia0p4VjJ4V1UyRnRVWGRPV0U1c1VrWktVRlpyWkRSWFJtUkdZVWMxVGxadGVGaGFWVkpUVkRKS1YyTkdWbGRpV0djd1ZHdFZNVTVzUm5SVWJYaFRVbFJDTlZac1VrZE9SVFZHVGxoU1ZGWkdXbFpaYTJodVRVWlNjMVZ0ZEZSU2JXaEtWMjV3UzFSck1WbGFla0pWWW01Q2NsWnFSbTlUVm5BMlVXczVUbGRIWTNkV1JtaDNWakF3ZUZadVRteFNSa3BQV2xkMFlXRnNjRlpWYlVab1ZqRmFXRll5TVU5aVJrcEhZMGhDVjJKWVp6QlVhMVV4VmxkR1NGUnRlRk5TYkZZMVZqQldiMkpyTVVaT1ZsWlhZbFUxYzFWclpFOU9iR1JHWVVjMVRsWlViRmxhUldSUFlrWktSMkY2UWxwaVdHY3dWR3RWTVZOR1ZuUlViWGhUVW10V05WWnNaRFJPUlRWR1RsUmFWMkpWTlhOVmExcHpUbXhXYzFkcVVrOVNWRlo0Vmxjd05WZFdUa2haTTJoVllsUkNORmRVU2xkU1ZtUlZWV3hzVkZJeVRqTldNVnBoVGtVMVJrNVdWbUZTTURWelZXdGFkMk14WkVaaFJ6Vk9UVVJHU0ZwVlVsTlVNVWwzWTBkd1lWWldTbGRVYkZwaFl6RmFkRlJ0ZUZOU01ERTJWakJXYjJKck1YSk5TR1JoVWtWS1lWWnROVzVOUmxKMFkwVjBXazFzV2taV1ZsSkxWMVpPU0ZrelpGVmlXRUpRVjFSS1YxSldXbFZXYkd4VVVqSk9ORlpIZEdGT1JUVkdUbFZvVTJKR1NsZFVWV1JUVTBaVmVGZHFVazlTVkZaV1ZXMDFVMkZzU25WYWVrSlZZbFJHVUZacVJtOVRWbkEyVVdzNVYySnRZM2RXUjNSVFdWVTFWMWR1UmxSaWJWSlZWRlphYzAweFpFWmhSelZzWVhwR1dGcFZVbE5VTVVwSVZXMXdZVlpXU2xkYVZscHZVMVp3TmxKc1FsTk5NbWhUVm0xd1ExWnJNVmhVYms1c1VrWktVRlpyV25kaGJIQldWVzFHYVZJd05VZFhhMlJQWWtaS1IxTnVTbGRpV0djd1ZHdFZNVk5HVm5SVWJYaFRVakF4TmxZd1ZtOWlhekZXVGxWa2JGSkdTbEJaYkZwaFZFWnNWVkpyZEdwaVJUVjZXbFZTVTFSdFZuSlRiWEJoVmxaS1YxUlVTa1psVmxaMFZHMTRVMUpVUWpOV01WcFRVakZyZVZaclZsWmlWMmhaVlcwMWJrMUdVblJqUm1SVFZtMW9TbGR1Y0VOVU1rcElZVWR3WVZaV1NtRmFWVnB2VTFadmVtTkZOV2xTV0VKeFYyeFdVMVpyTlVkaFJXeGhaV3RhVUZWcVRsTlhSbEpXVjJ0MFdrMXNXa1pXVmxKUFZUSktTVnA2UWxWWFNFSm9WMVphUzFkV1ZuTldiR3hVVWpKT05GWkdVa05XTVd0NVZtdFdWVlpGV2xwVk1HUnFaV3hTY1ZKdFJscE5iRnBHVm14U1QxZFdUa2haTTNCVlZsWnZNRlJyVlRGU1ZsSnlUMVpzVkZJeVRqTldSekUwV1ZacmVWWnJWbFpXUlRWaFZteGFZV1ZzWkZkYVJtUnFZa2RvU2xkdWNFTlhiRnAxV25wQ1ZXRXlVbWhYVkVwWFVsWmFWVlpzYkZSU01rNDBWa2QwVjFNeVJrZGlSbVJzVWtaS1VGbHNWVEZOTVZwMFpVWmthazFXU2pCWlZXUnpWMVpPU0ZrelpGVmhhMWt3Vkd0Vk1XTlhSa2hVYlhoVFVtdHdkbFp0Y0VkT1JUVkdUbGhTVjJKVk5YTlZhMlJQVFRGV2NWSnFVazlTVkZaV1ZsY3hUMkpHU2tkalNFcFhZbGhuTUZSclZURldWbVIwVkcxNFUxSnRkekZYYkdRMFdWWmtSMkZGYkdGbGEwcG9WV3RXZDJGc2NGWlZiWEJQVW0xb1NsZHVjRU5YYXpGWFUyMXdZVlpXU2xkVVZscHZVMVp3TmxKc2NGZGxiWGh4VjJ4V1UxWnRWbk5YYmxaU1lsVTFjMVZyVlhkbFZscFZVbXBTVDFKVVZqQldSM1JQVjFaT1NGa3phRlZoYTFrd1ZHdFZNV05XVG5SVWJYaFRVbTVDZVZZd1ZtOWlhekZ5VFVod1lWSXdOWE5WYTFwV1pWWldjVkpxVWs5U1ZFVXlWbTF3VDFkdFNrbGFla0pWVjBoQ1RGVjZSbHBsUjFaRlZXczVhR0V4Y0hGWGJGWlRWV3N4VjJGRmJHRmxhM0JoVkZab2JrMUdVblJqUldSYVRXeGFSbFl4VWtkaFJUQjNVMnhHV0ZKWGFIVlVWbFUxVjBkU1NGUnRlRk5TYlhOM1ZqQldiMkpyTVhOalJscE9WbGRTV2xVd1pHcGxSbEpZWlVSU1QxSlVWVEpXVnpGUFlrWktSMkpFV2xoU1YyaDFWRlZWTVZZeVZrVlZhelZzWWxob2IxWXdWbTlpYXpGSFkwVm9iRkl3V2xwVk1HUnFaREZTZEdWRVVrOVNWRlpXVmpGb2MxZFdUa2hhUkZwVlZteEtSRmRVU2xkU1ZscFpZMFpzVkZJeVRqVldNblJYWkRGcmVWWnJWbFpXUlZwWFZtMDFiazFHVW5OVmJFNWFUV3hhUmxac1VrdFdNVXAxV25wQ1ZXSkdTbWhYVkVwWFVsWndTR0ZHYkZSU01rNHpWa2N4TkU1Rk5VWk9TR3hUWWxWYVZGbHJhRzVOUmxKeldrVmthMkpHVmpSV01qRlBZa1pLU0ZScVRsVmlXR2N3Vkd0Vk1WWldVblJVYlhoVFVtNUNkMVpFUm1GT1JUVkdUbFpXVldKWGVGcFZNR1JxWlZaa2NscEZPVTVOVjJoS1YyNXdSMVF5UlhsVWFsSmhVa1ZaTUZSclZURldWbVJaV2tac1ZGSXlVVEpXUjNoWFdWWnJlVlpyVmxoWFIzaFZWVzAxYmsxR1VuSlZiVVphVFd4YVJsWXlNWE5YVms1SVdUTm9WVlpGV1RCVWExVXhVbFphZEZSdGVGTlNhM0IyVjFaV1lVNUZOVVpPVmxacFVtMVNhRlZ0Tlc1TlJsSjBUVlYwV2sxc1drWldNVkpEVjFaT1NGa3piRmhXUlVWNFdsWmFjMVp0UmtsYVIyaFRWa1ZhY1Zkc1ZsTlpWMFp6V2taa2JGSkdTazlhVjNSaFZqRmtSbUZITld4aGVrWjRWVzB4VDJKR1NrZFRibEpZVmpOU2FGVjZSbTlUVm5BMlVXczVUbGRIWTNkV1IzaFRVekZrV0ZSclpHaFNhelZhVlRCa2FtVkdVbkZUYlRsYVRXeGFSbGRZY0VkWFZrNUlXVE5vVldFeGJ6QlVhMVV4VmxaYWRGUnRlRk5TYkhCMlYxUkplRlZ0VVhkUFZtUnNVa1pLVUZaclduZFdiR1JHWVVjMVRtSkhkRFJhVlZKVFZESktWazVYY0dGV1ZrcFhWRlZhYjFOV2NEWlNhelZvWVROQ2NWZHNWbE5WTWtwSFlVVnNZVTB6UWs5VVZscDNZV3h3VmxWc1NrNWlSMmhLVjI1d1IxZHNXWGRYYkVKWVVsZG9kVlJWVlRGV1ZscDBWRzE0VTFKclZqVldhMlEwVGtVMVJrNVdWbGRpVlRWelZXdGFjazFHV25OYVJYUmFUV3hhUmxaV1VrdFhWazVJV1ROa1dGWnNXWGRXTWpGTFYxWkdkRlJ0ZUZOU2ExWTJWakZhWVU1Rk5VWk9WbFpZWVhwc1dsVXdaR3BsUmxGM1YycFNUMUpVVmtsV2JURlBZa1pLUjFaWWJGaFNWMmgxVkZWYWQxZEhUa2hVYlhoVFVteFpNVll3Vm05aWJWWnlUVlprYWxKWVFsaFphMmh1VFVaU1dXTkZjR3hTYldoS1YyNXdRMWxYU2xaalJXaFlVbGRvZFZSVlduTldiSEJJVkcxNFUxSnRkekZXTUZadlltc3hSazVWWkd4U1JrcFFWbXRhZDFkc1pFWmhSelZPVmxSR2VsZHJaRTlpUmtwSFlYcENXRkpYYUhWVVZFRXhWakpXUlZWck9WZFNhM0J4VjJ4V1UxWnJNSGxVV0hCaFVqQTFjMVZyV25KbFJsWnhVbTFHVTJKR2NGaGFWVkpUVkRKS1ZtRjZSbHBXYkhCb1YxUktWMUpXWkhSaVJteFVVakpPTkZZeFdtOWhNVmwzVFZWa2JGSkdTbEJXYWtKaFlXeHdWbFZ0Um1sU2JrSklXbFZTVTFSdFZuSlNWRVpYWVd0Wk1GUnJWVEZXVmtwMFZHMTRVMUp1UW5oV01GWnZZbXN4VmsxWVRsWmlWMmhhVlRCa2FtVldaRmhqUm1SYVRXeGFSbFl5TUhoV01rcEpXbnBDVldKVVJsUlhWRXBYVWxaU1ZWSnNiRlJTTWs0MVZqSjRWbVZHU1hoV2JrNXNVa1pLVUZwWGVFdGhiSEJXVld4T2FFMVhhRXBYYm5CSFZESktTVnA2UWxWaVdFSlVWMVJLVjFKV1duUmhSbFpYVFRKb2NWZHNWbE5XTWtaSFUyNU9iRkpHU2xCV2ExcDNZV3h3VmxWck5XeFNiV2hLVjI1d1IxUnRSWGRPVjNCaFZsWktZVnBWV205VFZuQTJVbXM1VjFKVmEzaFdiWGhoVGtVMVJrNVlVbFppVlRWelZXdGtUMDB4WkVaaFJ6Vk9ZWHBHV0ZwVlVsTlVNVnBIWTBab1ZrMXVhSFpXTWpGTFVqSldSVlZyT1ZkTlJtOTVWakJXYjJKck1WWk5TR2hZWW0xU1dsVXdaR3RPYkZKMFpVUlNUMUpVVmxaV1J6RlBZa1pLUjJOSVFsVmlSbFY0V1ZaYWIxTldjRFpUYlVaVFRXMW9jVmRzVmxOaGJWWkhWMWhvYkZKR1NsQlpiRlV4WVd4d1ZsVnNXazVpUmxZMFdXdGFiMWRXVGtoWk0yUllWbXh2TUZSclZURldWMFpJVkcxNFUxSnNWak5XYWtKcllqRnJlVlpyVmxoaVdFSlhXVlJHZDJGc2NGWlZiRTVvVW14YVNGbHJaRTlpUmtwSFZsaHdXRkpYYUhWVVZFRTFVMFpLZEZSdGVGTlNiWGN3VjFkMGIxRXhhM2xXYTFaWFZrVndXRlp0Tlc1TlJsSjBUVlU1V2sxc1drWlhWRTVyVmxkS1JtTkhjR0ZXVmtwWFZGUktWMUl5VmtWVmF6VnNZVEZ3Y1Zkc1ZsTldNa1pIVjJ4a2JGSkdTbEJXYTFaM1lXeHdWbFZ0Um1sV2JGWTBXbFZTVTFSdFZuSlhiWEJoVmxaS1ZGbHJXazlXTWxaRlZXczVWMUpyY0hGWGJGWlRXVmRLUjJGRmJHRmxhMHBoVm1wQ1lXRnNjRlpWYkZwT1RWZG9TbGR1Y0VOVU1EQjVZVWR3WVZaV1NsUlpWM2h2VTFad05sSnJPVTVYUjJOM1ZrZDRVMVV4YTNsV2ExWldZbGRvV2xVd1pHcGxSbEp4VW1wU1QxSlVWbFpWTW5oclYxWk9TRmt6YUZWaVdHY3dWR3RWTVZaV1duUlViWGhUVW14V00xWXdWbTlpYXpGellUTnNiRkl3TlhOVmExcFdaREZhV0dORmRGVk5SRUkwVmpJeFQySkdTa1pOVkZKWFZqTlNjbGRVU2xkU1ZsWjBaVVpPVjFKc2NIRlhiRlpUVldzeGMyRkZiR0ZsYTBwb1ZtMTRZV1JzV1hkYVJYUmFUV3hhUmxac1VrZFVNVnAxV25wQ1ZXSnVRbEJXYlRGR1pVZFdSVlZyT1ZkTlJuQnhWMnhXVTFWck1IaFZiazVZWWxVMWMxVnJXbFpsVmxweFVtcFNUMUpVVmxaWGEyUlBZa1pLUjJOSE9WZFdNMDB4VjFSS1YxSldXbGxpUm14VVVqSk9ORlpIZEdGT1JUVkdUbFpXV0dKVk5YTlZhMXBHVFZaYWRHUkhkRnBOYkZwR1YxaHdVMVpyTVZsYWVrSlZZa1pLVUZwRldtOVRWbkEyVVd4d1dGSldjRlZYVjNoclRrWnJlVlpyVmxkV1JVcFlXV3RvYmsxR1VsbGpSVGxwWVhwR1NGcFZVbE5VTVZwSFUyMXdZVlpXU21oWlZscHZVMVp3TmxKck9WZFNWbkI0Vm0weE5FNUZOVVpPVkZwU1lsVTFjMVZyV2taTlJscHlWMnBTVDFKVVZqQldWM0JUVm1zeFZtSkVUbGhTVjJoMVdsZHpNVkpXUm5OYVJUVlRZbTFqZDFaSGVGTlpWMUp6WWtoU2ExSXdOWE5WYTFWNFRrWnJlV1ZFVWs5U1ZGWkpWbTEwYzFkV1RraFpNMnhWVFVadk1GUnJWVEZrUmxKelZHeE9hVk5IWTNkV1IzUnJVakZXVjJGRmJHRmxhMXBRVlcweFVtUXhaRVpoUnpWT1lYcEdWMVJzWkU5aVJrcEhVbGhzV0ZKWGFIVlVWM014VW14a2RHRkdiRlJTTWs0elZrZHdSMDVGTlVaTlZGcFhZWHBzWVZadE5XNU5SbEp4VTJ0a1drMXNXa1pXVmxKTFlrZEtTVnA2UWxWaVIxSklWMVJLVjFKV1dsVlNiRnBwVTBkamQxWkhlRk5VTVd0NVZtdFdWMVpGU2s5WmEyaHVUVVpTY2xwRlpGaFNiSEF3Vkd4V1QxZFdUa2haTTJoVlRVWndURmRVU2xkU1ZtUjBaRWRHVTFKVVZsZFdNRlp2WW0xV2NrMVdaR3BTTURWelZXdGFSMDVzV25SbFJGSlBVbFJXUmxZeU1VOWlSa3BIVTI1T1dGSlhhSFZVVkVFeFZqSk9SbHBHYkZSU01rNDFWakZTUjA1Rk5VWk9WbFpXWWxVMWMxVnJXbGRPVmxKWVpVUlNUMUpVVmtsV2JGSkhWMVpPU0ZremFGVmlXRkpvVjFaYWIxTldjRFpUYkhCcFZsWlpNVlpVU2pST1JUVkdUbFZXWVZJd1drOVVWbWh1VFVaU2RXTkZUbHBOYkZwR1ZteFNRMWRXVGtoWk0yeFZWak5uTUZSclZURldWbHAwVkcxNFUxSlVRalJXTUZadlltc3dkMDFJYUd4U1JrcFFWbXRhWVdWV1pFWmhSelZPVm0xNFdGcFZVbE5VTWxaeVkwZHdZVlpXU21GVVZscHZVMVp3TmxGck9XbFdhM0JKVmpCV2IySnJNWEpOVm1Sc1VrWktVRlZyWkU1bFJtUkdZVWMxVGxKdVFsbFZNblJ2WVRGS1IxTnRjR0ZXVmtwWVdWVmFZVll4VG5OVmJHeFVVakpPTkZaSGRGTlRNVTE0WVVWc1lXVnJXbEJVVjNNeFUxWnJkMWRxVWs5U1ZGWjRWVzE0YTFkV1RraFpNMmhWWWxoU00xbFZXbXRqTWxaRlZXczVWMUpzY0hGWGJGWlRWakpHUjJGRmJHRmxhelZRVkZaVk1XRnNjRlpWYkVwT1lrZFNNVlpYTVRCWFZrNUlXVE5rVldKR2J6QlVhMVV4VG14R2RGUnRlRk5TYlhOM1ZqQldiMkpyTVZaT1dFWlZZbFUxYzFWcldsZE9WbEpXVjJwU1QxSlVWbFpXYkdoelYxWk9TRnBFV2xWV2JHOHdWR3RWTVU1c1VuUmlSMnhYVm14d2NWZHNWbE5oYXpWWFlVVnNZV1ZyV2xCWmJHaERWMFprUm1GSE5VNVdWRll3VlcwMVUxZFdUa2haTTJoVlZqTlJkMWRVU2xkU1ZscFZWbXhzVkZJeVRqUldSM1JoVGtVMVJrNVZhRk5pUmtwaFZtcE9iMkZzY0ZaVmJYQnJUVmRvU2xkdWNFZFVNa3BKV25wQ1ZXSkdTbGhaZWtaVFl6SldSVlZyT1doaVYyaDNWbGR3UzJJeGEzbFdhMVpXWWxkb1dsVXdaR3BsUmxKeFUxUkdXazFzV2taWFZFNXJWMVpPU0ZrelpGVldSVmt3Vkd0Vk1WWlhTa2hVYlhoVFVteFdObFl3Vm05aWF6RkhZa1phYVZJd1duTlpWRUozWVd4d1ZsVnNXazVXYlhoWVdsVlNVMVJ0Vm5KWGJYQmhWbFpLVkZsVldtOVRWbkEyVVd4d1RsZEhZM2RXUjNoVFZqRnJlVlpyVmxkV1JUVnpWVzAxYmsxR1VuTlZhemxXVFVSR1dGVXlNVTlpUmtwSFZsUkNXRll6VW5KWFZFcFhVbFpTV1dGR2JGUlNNazQwVmtkd1MxTXlUbkpPVm14aFVtMVNUMVZ0Tlc1TlJsSnpWVzFHV2sxc1drWldNakI0VjIxS1dWUnFVbGhTVjJoMVZGUkJkMlZXVG5SVWJYaFRVbXRXTlZZd1ZtOWlhekZ5VDFWb2FWSnJOVTlWYlRWdVRVWlNXV05HWkd4aVJuQlpXa1ZrTUZaWFNsZFhhMmhhVFVadk1GUnJWVEZTVm5CSFlVWnNWRkl5VGpWV01WcGhVekZXUjFadVRteFNSa3BRVm10YVMyRnNjRlpWYkZwT1ZtMW9TbGRxVG5kVWJVcEhWMnhzVldKR2J6QlVhMVV4WTFaS2RGUnRlRk5TYkZZMlZqQldiMkpyTVZaT1dFcFBWakExYzFWcldrWk5SbGw0VjJwU1QxSlVSVEpXUnpGUFlrWktTRlJxVGxkaVJtOHdWR3RWTVZOR1ZuUlViWGhUVW14V05sWnJXbUZPUlRWR1RWUmFVMkpWTlhOVmExcFdaREZhY2xkcVVrOVNWRlpHVmpJeFQySkdTa2RqU0ZKWVVsZG9kVlJXVlhkbFIxWkZWV3M1VjFKdVFYcFdNRlp2WW0xV2NrNVlUbFppVlRWelZXdGFkMk5HWkVaaFJ6VnNZWHBzV0ZkclpITmhWbGwzVGtod1dGSlhhSFZVVmxVeFl6SldSVlZyT1ZOU01VcHhWMnhXVTFSck1WaFZXR2hzVWtaS1VGWnJXbmROUm1SR1lVYzFUbEpVVm5wWGEyUlBZa1pLUjJKRVVsaFNWMmgxVkZWVk1XUkhWa2hVYlhoVFVtdHdlbFp0TVhkUk1sRjRWRmhvYkZKR1NsQldhMlEwWVd4d1ZsVnRSbWhXTUZwSVdsVlNVMVF5U2xkWGJYQmhWbFpLVkZsVVJrdGpNbFpGVldzNVYxSlhPVE5XTUZadlltc3hjazFJYUd4U1JrcFFWV3RhV21ReFpFWmhSelZPWVhwc1NGcFZVbE5VTVZwR1kwUkNXRkpYYUhWVVZFRXhVakpXUlZWck5XeGlSWEJ4VjJ4V1UxWXlSa2RoUld4aFpXdGFVRlp0ZEhkaGJIQldWV3hhYkdKSGFFcFhibkJIVkRGS1JtTkhjR0ZXVmtwVVdWVmFiMU5XY0RaU2F6bHBWbFJXU2xkVVFtdFNNV3Q1Vm10V1YxWkZjRmhaVkU1RFlqRmFjbGRxVWs5U1ZGWldWbGQwYTFkV1RraFpNMnhZWWxob1VGZFVTbGRTVmxwVlUyeHNWRkl5VGpaV1JsWmhUa1UxUmsxVVdsaGlSbHBhVlRCa2FtVldaRmhsUkZKUFVsUkZNbFp0TVU5aVJrcEhZWHBHV0ZKWGFIVlVWbFV4WXpKV1JWVnJPVk5TTVVWM1ZqQldiMkpyTUhkTlZtUmhVakExYzFWclduZGpWbVJHWVVjMVRsWlVWbnBXUnpGdllVZFdjbGRzY0ZoU1YyaDFWRlpWZDJWSFZrVlZhemxwVm14d1VWZFhkR0ZUTVVsNFlVVnNZV1ZyU21GV2JYUkxXVlprUm1GSE5VNVdWRkkwV2xWU1UxUXlWblJoUlRGWVVsZG9kVlJYYzNoak1sWkZWV3M1VjFKdVFuRlhiRlpUVjJzeFIyRkZiR0ZsYTBwUVdXdG9iazFHVW5SalJXUlVVbTFvU2xkcVRuZFVNVnBWVm0xd1lWWldTbUZhVlZwdlUxWndObFJzY0ZkV1YzUXpWbXBLTkU1Rk5VWk9WbFpYWWtVMVYxUldhRzVOUmxKelZXeEtiRlp0YUVwWGJuQkRWMnhhZEZWdGNHRldWa3BoV2xkNGIxTldjRFpSYkVKVVVsVndiMVl3Vm05aWF6RnlUVlpvYW1WcldsVlVWbVEwVjBaa1JtRkhOVTVXYlhoWVdsVlNVMVF5U2xkalIzQmhWbFpLVjFSWGVHRldWa3B5VjJ4d2FWTkhZM2RXUjNSVFZqRnJlVlpyVmxwTk1sSnZWVzAxYmsxR1VuUmpSV1JhVFd4YVJsZHJaRzlYVms1SVdUTmtWV0pZWnpCVWExVXhUbXh3UjJGSGJGZGliV04zVmtjMWQxVXlVbk5WYkZaVVlsVTFjMVZyV2tabFJuQlhWMnBTVDFKVVZsWldNakZQWWtaS1IyTkhPVmhTVjJoMVZGWlZNV015VmtWVmF6bFhVbTVDZGxkWGVHRlRNVkpIV2tab2ExSjZiSEJaV0hCSFlXeHdWbFZzU2s1aVIyaEtWMjV3UjFSdFNuSmpSM0JoVmxaS1YxUldXbTlUVm5BMlUyMUdVMkp0WTNkV1J6VjNWVEZzVjFWc2FHeFNNRFZ6Vld0YVlXSXhWblJsUjBaWVVtMW9TbGRxVG5kVWJHUklWVzF3WVZaV1NsZFVWRVp2VTFad05sSnJPV2xUUjJOM1ZrZDBhMVl4VGxkYVJtUnNVa1pLVDFwWGN6RmhiSEJXVld4d1RsSnRVa2xWTWpGUFlrWktSMVpVUWxoaWJrSkVWbXhrUm1WR1dsbGhSbHBwVTBkamQxWkhlRk5aVmxGNVZXdGtiRkpHU2xCV2ExcExUVVprUm1GSE5VNU5SR3hJV2xWU1UxUXhXa1pPVmxKYVZrVlpNRlJyVlRGV1YwcElWRzE0VTFKVVJYcFdNRlp2WW1zeFZrNVlUbXhTUmtwUFdsZDBTMWRHYkhGVGEzUnFZWHBHV0ZwVlVsTlVNVXBJVlcxd1lWWldTbUZhVlZwdlUxWnZlbU5GTlU1aVYyaHhWMnhXVTFsWFJuTldia3BZWVROU1YxVnRlSGRoYkhCV1ZXMUdhRlpzY0ZoYVZWSlRWREpXZEdGSVJsaFNWMmgxVkZWVk1XTXlWa1ZWYXpsc1lUQnZNbFp0Y0VwTlYxRjRZVVZzWVdWcmNGRlZiVFZ1VFVaU2MxVnRSbXRTTUZwSVdsVlNVMVF4U1hkWGJYQmhWbFpLVjFSVVNrdGpNbFpGVldzNWJHRXdjRkpXTUZadlltc3hWazVWWkd4U1JrcFBXbGQwWVZSR1pFWmhSelZPVFVSV1dGcFZVbE5VTVZsM1YyMXdZVlpXU25KWlZWcEhZekpXUlZWck9WZFNiSEIyVjFaU1IwNUZOVVpPVkZwU1lsVTFjMVZyV2taTlJtUkdZVWMxVGxaVVVqUldWM1F3VmpBeFZtTkdhRmhoTVhCWVZsZDRiMU5XY0RaVGJVWlRUVEpvY1Zkc1ZsTldiVlp6WTBab2JGSXdXbHBWTUdScVpXeFNWMWRxVWs5U1ZGWldWMnRvVDFkV1RraFpNMmhWWWxobk1GUnJWVEZXVmxKMFlVWnNWRkl5VGpWV01uUmhXVlpyZVZaclZscE5NMEphVlRCa2FtVldVbGRYYWxKUFVsUldSbFp0TlU5WGJGbDRWMjF3WVZaV1NtaFpWbHB2VTFad05sUnJOVk5OYldoWVYxWmtNRmxXWkVkaE0yUllZbGhTV2xVd1pHcGtNVkp4VW1wU1QxSlVWbGxWYlRGUFlrWktSazFVV2xoU1YyaDFWRmR6TlZJeVZrVlZhemxYVFVad2NWZHNWbE5YYlZaR1RWaFdhRkpHY0ZwVk1HUnFaVVprVjFkc1pGcE5iRnBHVm14b2MxZFdUa2haTTJoVlZrVlpNRlJyVlRGV1ZsWlpZa1pzVkZJeVRqTldSekUwVGtVMVJrNVVXbFJpVlRWelZXdGFjMDVzWkVaaFJ6Vk9VbFJWTWxsclpFOWlSa3BIVmxSQ1dGSlhhSFZVVmxWNFl6RndTRlJ0ZUZOU2JYTjNWakJXYjJKck1IZE9WbVJzVWtaS1VGWnJXa3RYVm1SR1lVYzFUazFFUWpSYVZWSlRWREpXZEZWdGNHRldWa3BoVkZaYVdtVkdUbkppUm14VVVqSk9NMVl5ZUdGaE1sRjVVbXhrVldKVk5YTlZhMXBHWld4a1ZWUnRkRmROVlc4eVZWZHdVMWRXVGtoWk0yaFZUVlp2TUZSclZURldWbVIxVTJ4c1ZGSXlUalpXUkVaaFdWWnJlVlpyVmxoaVYzaGFWVEJrYW1WR1VuUmxTR1JhVFd4YVJsWXhVa2RYVms1SVdUTnNXRll6YUROYVJFWnJWakpXUlZWck9XbFdWRlp2Vmxod1IwNUZOVVpPV0VaVVlrZFNXbFV3WkdwbFZsSnlWMnBTVDFKVVZsWldiVEZQWWtaS1IxWnFXbGRoTVhCb1YxWmFiMU5XY0RaUmJVWlRUVEpvY1Zkc1ZsTldNa1pIWVVWc1lXVnJTbEJaYTFwelRsWlNWMkZIZEZwTmJGcEdWakZvYjFZeFdrWlhiWEJoVmxaS1YxUnNXbTlUVm5BMlVteHdWMkp0WTNkV1IzQkxVakZyZVZaclZsWlhSM2hZVm1wQ2QyRnNjRlpWYlVacFVtdGFlbHBWVWxOVU1VbDNZMGRHVjJKWWFETlhWRXBYVWxaa2RFMVdaR2xUUjJOM1ZrZDRVMVp0VmtkaFJXeGhaV3RLVUZacVFuZGhiSEJXVld4S1RsWXdOVWxaYTFwVFYxWk9TRmt6WkZWaGEzQlFWRlJHYjFOV2NEWlNhemxwVTBkamQxWkhkRk5aVjBsNFlVVnNZV1ZyTlZCVVZscGhZV3h3VmxWdFJtaE5WWEI2VmpJeE1GZFdUa2haTTJSVllsaG9URmt3V205VFZuQTJVbXMxYUUxc1NuRlhiRlpUVm0xV1YyRkZiR0ZsYXpWUFZtMHhOR0ZzY0ZaVmJVWm9Za2RvU2xkdWNFZFhiRnAxVVcxd1lWWldTbUZVVlZwdlUxWnZlbU5GTlZkaWJXTjNWa2MxZDFFeFRrZGhSV3hoWld0d1QxWnROVzVOUmxKeVZXeGtXazFzV2taWFdIQkRZVVV4V1ZwNlFsVmlSa3BvVjFSS1YxSldXbFZVYkd4VVVqSk9ObFpFUW1GT1JUVkdUbFJhYUZJd1dscFZNR1JxWlVaU2MxZHFVazlTVkZaNFZsY3hUMkpHU2tkVGJsSllVbGRvZFZSWGMzaGpiR1IwVkcxNFUxSnJjSFpXVkVKaFRrVTFSazVXVmxaaWExcGFWVEJrYW1WR1pGZFhiVGxXVFZkb1NsZHVjRWRVTURGWlducENWV0pZUW5aVVZscHZVMVp3TmxKck9WTmlSWEJFVjJ4V1lVNUZOVVpPVmxaVVYwZDRXbFV3WkdwbFJsSjBaRVprV2sxc1drWldiRkpIWVVkV2RHVkhjR0ZXVmtwaFZHdGFjMVl5VmtWVmF6VnNZVEZ2ZVZkc1ZtRk9SVFZHVGxaV1dGZEhVbHBWTUdScVpVWlNkRTFFVm1oV2JXaEtWMjV3UzFsV1NuTmpSM0JoVmxaS1YxUlhlRk5XTVZwMFZHMTRVMUp0ZEROWFYzUmhUa1UxUms1V1ZsUmlWVFZ6Vld0YVJtVldaRVpoUnpWT1VtMTRXRlZYZUhkWFZrNUlXVE5vVldGck5VOWFWVnAzVjBkV1NHUkdiRlJTTWs0MFZrZHdTMUl4YTNsV2ExWldWa1ZhV2xVd1pHdE9iRkY0V2tSU2FGWnJjRmhhVlZKVFZERkpkMWRzWkZkaGExa3dWR3RWTVdSR1RuUlViWGhUVW0xME0xWXdWbTlpYXpGSFkwaE9iRkpHU2xCWlYzUjNZV3h3VmxWc1NrNWlSVFY1V1ZWYVYxZFdUa2haTTJ4WVZteFZlRmRVU2xkU1ZscFZWV3hhYVZJeFNuRlhiRlpUVjJzMVIyRkZiR0ZsYXpWUVZtMDFiazFHVW5OVmJFNVlVakZhU0ZwVlVsTlVNbFowVlc1R1ZWWXphR2hYVkVwWFVsWldWVkpzYkZSU01rNDBWa2Q0WVU1Rk5VWk9XRkpVVmtaYWNGVnFRbUZoYkhCV1ZXczFhMDFyY0VaV1Z6RlBZa1pLUjFaWWNGaFNWMmgxVkZaVk1WSXlWa1ZWYXpsVFVsaENkbFpyWkRST1JUVkdUbFZXVjJKVk5YTlZhMVYzWlVaa1JtRkhOVTVTVkZaNldsVlNVMVF4U1hoWGJHaFlVbGRvZFZSV1ZURmpNbFpGVldzNVYxSnVRbkZYYkZaVFYyMVdWMkZGYkdGbGExcFFWbXRhWVU1c1duTlhhbEpQVWxSV01GVXlNVWRYVms1SVdUTndWV0ZyY0ZSWFZFcFhVbFpXVlZOc2JGUlNNazQxVmtkMFYxbFhSa2RoUld4aFpXdEtVRlJXYUc1TlJsSlpZMFprV2sxc1drWldWekUwVjFaT1NGa3piRlZXTTJjd1ZHdFZNVkpYUmtaVWF6VlRZbTFqZDFaSGVHdFNNV3Q1Vm10V1YxWkZXbHBWTUdScVpVWlNXR1ZFVWs5U1ZGWkdWa2N4VDJKR1NrZFdXSEJZVWxkb2RWUldWVEZqTWxaRlZXczVVMDFXY0hGWGJGWlRWV3MxUjFwR1pHeFNSa3BQV2xkek1XRnNjRlpWYlVab1lrWndWMVJXWkU5aVJrcEhWbGh3V2xaV2J6QlVhMVV4VWxaU2RGUnRlRk5TYkZWNFYxZDRiMVV4YTNsV2ExWmFUVE5DVjFsWGRIZGhiSEJXVld4YVRtSkZjRmhhVlZKVFZERmFSMWR1YkZoU1YyaDFXbGR6TlZkSFZraGlSazVZVWxWd2NWZHNWbE5VYlZaellVVnNZV1ZyV2xCWmEyaHVUVVpTV1dORlRsZE5WMmhLVjI1d1MxbFhTbFpqUjNCaFZsWkthRmxXV205VFZtOTZZMFUxVkZJeFNsRldiWGhyVlRGcmVWWnJWbGhpV0VKYVZUQmthbVZHVWxobFJGSlBVbFJXUmxZeU1VOWlSa3BIVTIwNVYxWldiekJVYTFVeFZsZEtTVlJzWkZkaWJXTjNWa1pvZDFJeVJuTmhSV3hoVFROQ1QxWnFSa3RUUm1SR1lVYzFUbUY2UmxkWGEyUlBZa1pLUmsxSWFGaFNWMmgxVkZkNGNtVldUbkppUm14VVVqSk9NMVpHWkRCaU1XdDVWbXRXVjJKWGFGcFZNR1JxWlVaU2MxZHJkRmRTYkhCSlZGWmtUMkpHU2tkU1dHeFlVbGRvZFZSVVFURlNNbFpGVldzNVYxSnJjSEZYYkZaVFdWZEtSMUp1VG14U1JrcFFWbXRhWVZaR1VsVlJWRUpPVW0xb1NsZHVjRWRWUmxwelYyMXdZVlpXU2xoWlZWcHZVMVp3TmxSck9XbFRSMk4zVmtjeGQxWXhhM2xXYTFaWFZrVndXbFV3WkdwbFJtUlhWMnhrV0ZJd2NFaGFWVkpUVkRGS1JtTklaRmhTVjJoMVZGWlZNV015VmtWVmF6VnNZVE5DTWxZd1ZtOWlhekI0WWtaa1lWSnRhRnBWTUdScVpXeFNjbGw2VmxwTmJGcEdWbXhvYjFSdFJYcFJiWEJoVmxaS1UxUnJXbTlUVm5BMlVtczVVMlZzV25GWGJGWlRWVzFXVjJKR1pHeFNSa3BRVldwR1MwMUdjRlpYYm1SYVRXeGFSbFpzVWtkVWJFcDFXbnBDVldKWVFsUlpNVnAzVmpGa2RGUnRlRk5TYlhRelYxUktOR0V4YTNsV2ExWllZbGRvVjFscmFHNU5SbEp5V2tkR1ZrMVhhRXBYYm5CSFZERktkVnA2UWxWaVJrcG9WMVJLVjFKV2JEWlZiR1JYWW0xamQxWkhNSGhWTVd0NVZtdFdWVmRIYUZaVVYzUjNVMFpWZVdSSGRGcE5iRnBHVmpGb2IxUnJNSGRUYkhCWVVsZG9kVlJXVlhoak1YQklUMVpzVkZJeVRqWldSM2hoVGtVMVJrNVdWbFppUjJoeFZGWm9iazFHVWxsalJXUllVbTFvU2xkdWNFTlVNa1kyVmxoa1YyRXlUalJVYTFwV1pVWk9kRlJ0ZUZOU2JrSjVWMWh3VDJJeFpFZGhSV3hoWld0YVVGVnROVzVOUmxKeVdrVmtXazFzV2taV1JsSkRWbGRGZUZaWWFGWmlXRTE0VjFSS1YxSldXbFZWYkd4VVVqSk9NMVpITVRSWlZtdDVWbXRXV0ZkSGVGaFpiWFJMWVVaYWMxVnJUbHBOYkZwR1ZqRlNRMWRXVGtoWk0yeFlWbXh2TUZSclZURmpWbHAxVkd4YWFWSnVRbkZYYkZaVFZtczFXRlp1VG14U1JrcFFWbXRhZDJGc2NGWlZiVVpvVm14S1dGcFZVbE5VTVZwSVZXMXdZVlpXU21GVWExcFBZekpXUlZWck9WZFNNVXB4VjJ4V1UxbFhTa2RoUld4aFpXczFUMVZ0Tlc1TlJsSnlXa2RHVjFaVVJsbFdWekZQWWtaS1IxSlliRmRXTTJjd1ZHdFZNV1JHV25KVWJHUlRZbTFqZDFaSGRHdFZNV3Q1Vm10V1YxWkZXazlXYlRWdVRVWlNXV05GT1ZkU01WcDVWakl4VDJKR1NrZGpTRTVZWWtaYVdGZFVTbGRTVmxKVlZteFNVMVpIZUhGWGJGWlRWbXN4VjJGRmJHRmxhelZQVldwS05HRnNjRlpWYkZwc1lrZG9TbGR1Y0VOVU1ERlpXbnBDVldKWVFsQlhWRXBYVWxac05sUnNiRlJTTWs0MFZrY3hORTVGTlVaT1ZWWmhVa1ZLYjFSV2FHNU5SbEp6Vld4d2JGSXdWalpaYTJSUFlrWktSMVpZYkZoU1YyaDFWRmQ0YzJNeFpIUlViWGhUVW14VmQxWXhaRFJWTVVsNFlVVnNZV1ZyV21GV2JUVnVUVVpTYzFWc1dtdE5WMmhLVjI1d1MxUXhTblZhZWtKVllsUkdTRmxyWkV0U01sWkZWV3M1VjFKWVFURldiWEJMWkRGVmVGVllhRlJpVlRWelZXdGFWbVF4Vm5ST1Z6bGFUV3hhUmxac1VrZFdNbFp5VjJwS1dGSlhhSFZVVjNONFZqSldSVlZyTld4aE0wSnhWMnhXVTFVeVJrZFhiazVoVTBaS2NWVnFRbUZoYkhCV1ZXeGFUbUpHY0hsWk1HUnZWMVpPU0ZremFGVmhNVzh3Vkd0Vk1XUkdVblJTYkd4VVVqSk9OVll5TVRSVU1WbDRZVVZzWVdWck5VOVZhMXAzWVd4d1ZsVnNXbXhpVlhCSVdsVlNVMVF5Vm5KVGJYQmhWbFpLVkZsclduTldWa3AwVkcxNFUxSXdOSHBXTUZadlltc3dkMDFXWkdGVFJUVmFWVEJrYW1WR1VuUmxSRkpQVWxSV1ZsWkhNVTlpUmtwSFZsaHdXRkpYYUhWVVYzaDNVakpXUlZWck9WZFNia0phVmpGYVYxWXhhM2xXYTFaWVlsaENXbFV3WkdwbFZsSlhWMnBTVDFKVVZuaFdiVEZQWWtaS1IyTklRbHBOUjFKSVZteGFZV1JIUmtoVWJYaFRVbTVDZWxacldtRk9SVFZHVGxWV1dHSlZOWE5WYTFwWFRsWmtSbUZITlU1TlJGWkpWa2N4VDJKR1NrZFNXR3hYVFdwR1NGZFVTbGRTVmxaMFpFWnNWRkl5VGpSV1IzQkxZakZyZVZaclZsWmlWMmhhVlRCa2FtVkdVbkZTYWxKUFVsUldNRlp0Tld0V1JURlpXbnBDVldKR1NsTmFWbHBQWXpKV1JWVnJPVmRTYkhCM1ZqQldiMkpyTVVaT1NHaHNVa1pLVUZwWGRFdGhiSEJXVld4d2JGSnRhRXBYYm5CSFZESktTVnA2UWxWaVJrcG9WWHBHYjFOV2NEWlVhelZYWW0xamQxWkhlR3RTTVZsNFYyNVdWV0pGTlZwVk1HUnJUbXhTV0dWRVVrOVNWRlpXVmpJeFQySkdTa2RTV0doWFlrWnZNRlJyVlRGa1JrNTBWRzE0VTFKVVFYaFdNRlp2WW1zeGMyRXphR3hTUmtwUVdWZDBZV0ZzY0ZaVmF6VnJUVmRvU2xkdWNFdFpWMHAwWlVkd1lWWldTbGRVVkVadlUxWndObEpyT1ZOV1dFSnhWMnhXVTFsWFNsZGhSV3hoWld0YVVGbFhkSGRWTVhCWFYyeE9hbFpzY0hwVk1qRlBZa1pLUjJKRVZsZGlSbTh3Vkd0VmVFNXNXblJVYlhoVFVqQTBNbFp0ZUd0TlIwVjRWVzVPYkZKR1NsQlpWM2hoWVd4d1ZsVnRSbWhpU0VKSVdsVlNVMVF4U2tkalJ6bFdZV3RaTUZSclZYaE9iRnAwVkcxNFUxSnJjSHBXTVZwaFRrVTFSazVJYkZOaVZUVnpWV3RhZDJOV1dYbGxSMFphVFd4YVJsWnNVazlYVms1SVdrUmFWVlpXYnpCVWExVjRUbXhhYzFWdGJGTmliV04zVmtkMGExSXhhM2xXYTFaYVpXdGFXVmx0TlVOaGJIQldWV3hLYkZadGFFcFhibkJIVkRGYWRWcDZRbFZpV0VKSFdsVmFUMk50VmtoVWJYaFRVbXhXTmxadGRGZGtNV1JIVm01T2JGSkdTbEJXYTFwM1lXeHdWbFZzY0U1U2JXaEtWMjV3UjFWR1duVmFla0pWWWxoQ1NGZFVTbGRTVmxaVlUyeHNWRkl5VGpWV01WSkhUa1UxUms1V1ZsWmlWVFZ6Vld0YVYwNVdVbGhqZWtaYVRXeGFSbFpHVWtkWFZrNUlXVE5vVldKWVp6QlVhMVV4VWxaa2RGUnRlRk5TYkZreFZqQldiMkpyTVVkaVNFNXNVa1pLVUZWcVJrdFRSbXhWVW1wU1QxSlVWVEpaYTFwclYxWk9TRmt6YkZoV00yY3dWR3RWTVZaV1pIUlViWGhUVW14VmQxWXdWbTlpYXpGV1RsaEtWMVpGV2xsWmEyaHVUVVpTYzFWc1dtdE5XRUpKV1RCa05HRldTbkpqUjNCaFZsWktWMVJyV205VFZuQTJVVzFHVTFacmNIRlhiRlpUVm1zeGMxVnVUbXhTUmtwUVZtdGFkMDFHWkVaaFJ6Vk9ZWHBzUjFrd1dtOWhWMHBKV25wQ1ZXSnVRa1JXUlZwdlUxWndObEpzUWxkaVNFSm9WMnhXWVZNeVVrWk9WbVJvVW1zMVdGUlhNVzVsUmxweVYycFNUMUpVVmxaV2JURlBZa1pLUjFkdE9WaFNWMmgxVkZSQk1HVldVbGxpUm1Sb1RWWndXRmRXYUhkak1XdDVWbXRXV0dKWVFtRlpWRXB2WVd4d1ZsVnNTbXhXYldoS1YyNXdUMVJzV25WYWVrSlZZa1pLY2xsNlJtRmpNbFpGVldzNVYxSlVWbHBYVmxKSFRrVTFSazFVV2xOaVIyaGhWbXhhWVdWc1pGZFhhbEpQVWxSV2VGWnROVXRVTVZwMVducENWV0V5VW1oWFZFcFhVbFphVlZac2JGUlNNazQxVmpGamVHSXlVbGRWYkZwWVlrVTFXbFV3WkdwbGJGSnlWMnBTVDFKVVZrbFdWM2hoVlVaYWRWcDZRbFZpV0VKMlYxUktWMUpXV2xsaVJUVlhZbTFqZDFaSGVHdFNNVnB6VjJ4a2JGSkdTbEJXYTJSVFlXeHdWbFZyTld4U2JXaEtWMjV3UTFsWFNrbGFla0pWWWxoQ1RGZFVTbGRTVmxaVlUyeFNhVk5IWTNkV1IzUlRZakZyZVZaclZsZFdSVXBhVlRCa2FtVldaRmRYYWxKUFVsUldXVlZ0TVU5aVJrcEhWbFJDV0ZZelp6QlVhMVV4VWxaa2RGUnRlRk5TYmtJd1ZqQldiMkp0Vm5KTlZXUnNVa1pLVUZacldrdGxWbVJHWVVjMVRsWlVWbFpWYlhNMVlWWktjMk5IY0dGV1ZrcFhWR3RhYjFOV2NEWlNiSEJYWW0xamQxWkhkRk5aVm10NVZtdFdXR0pZUWxwVk1HUnFaVVpTY2xkcmNHeFdiRXA2V2xWU1UxUnRWbk5qUjNCaFZsWktWMVJYZUc5VFZuQTJVV3M1VGxkSFkzZFdSelYzVlRKT1YxVnVUbXhTUmtwUVZtdGFkMlZXY0ZkWGFsSlBVbFJXVmxZeU5VdFdNa3BKV25wQ1ZXSkdTbFJXTUZwS1pVZFdSVlZyT1ZkU1dFSnhWMnhXVTFZeVJrZFhiRlpTWWxVMWMxVnJXbkprTVd4WVpVUlNUMUpVVm5oV1Z6RlBZa1pLUmsxVVVsaFNWMmgxVkZkek1WSXlWa1ZWYXpsc1lYcFdhRll3Vm05aWF6QjRZa1prYkZKR1NsQldhMXAzWlZaa1JtRkhOVTVXVkZZd1ZGWmpOVlpIU2toVmJYQmhWbFpLYUZsclpFOVNNbFpGVldzNVUwMUlRbGRXTUZadlltMVdjazFXWkZoV1JYQllWbTV3VjJGc2NGWlZiRXBzVm0xb1NsZHVjRWRVTVVwVlVtMXdZVlpXU2xkVVZsVjRVakpXUlZWck9XeGlWa3BvVmpCV2IySnJNVlpPV0U1c1VrWktVRlpxUW1GaGJIQldWVzFHYVZac1ZqUldNalZoVjFaT1NGa3pjRmhXYlZKTVZXMTRiMU5XYjNwalJrSlhUVEpvZGxZd1ZtOWlhekZ6WVROa1dGZEhlRnBWTUdScVpVWlNkR1ZFVWs5U1ZFVXlWVmN4VDJKR1NrZFdXR3hZVWxkb2RWUlhlSGRrUms1MVZXeGthVk5IWTNkV1J6VjNWREZyZVZaclZsaFhSM2hVVlcwMWJrMUdVbk5WYlVaYVRXeGFSbFpzYUd0V01ERklZVWR3WVZaV1NsTmFWbVJQVmpGYWRGUnRlRk5TYmtKMlZqQldiMkpyTVVaTldGSlRZbFUxYzFWcldrdGpiR1JHWVVjMVRsWlVWbnBXTW5SelYyMUtTVnA2UWxWaE1VcFlWMVJLVjFKV2EzcGFSbXhVVWpKT00xWXlNVFJPUlRWR1RsVm9WbUpWTlhOVmExcDNZMVpyZDFkcVVrOVNWRlpXV1d0YWEyRldXa2RYYlhCaFZsWktWRmxzV25OWFIxSklWRzE0VTFKVVJUQlhXSEJIVGtVMVJrNVdWbUZUUmxwYVZUQmthbVZXVW5KWGFsSlBVbFJXVmxsVlpFOWlSa3BIWWtSV1YyRnJOWFpYVkVwWFVsWnNObEpzYkZSU01rNDBWa1JHYTJReFJYaGhSV3hoWldzMVVGUldWVEZYVm1SR1lVYzFUbEp1UWtwWmEyUXdWVEF3ZVdGSGNHRldWa3BvV1ZkNFlXTXlWa1ZWYXpsWFVqSm9SVmRVUm1GaE1XdDVWbXRXV0dKWVFsaFphMVV4WVd4d1ZsVnNXazVXYldoS1YyNXdTMWR0U2tsYWVrSlZWMGhDUkZSclduTldNbFpGVldzNVUxSnNjSEZYYkZaVFdWZEdjMkZGYkdGbGEzQlBWbXBHWVdWV1pFWmhSelZPVW0xNFdGcFZVbE5VTWtaeVYyeGFWMkpZWnpCVWExVXhZMWRHU1Zac2JGUlNNazR6VmpKMFYxbFdWWGhoUld4aFpXczFUMWxyYUc1TlJsSnpXa1ZrV2sxc1drWldWbEpQVlRKS1NWRnRjR0ZXVmtwVVdWUkdiMU5XY0RaVGJIQk9WMFZLU1ZZd1ZtOWlhekZXVGxoT2JGSkdTbEJXYTFwM1lXeHdWbFZzY0U5U01ERTBXbFZTVTFReFdraFZiWEJoVmxaS1YxUlhlRk5qYlVaSVZHMTRVMUpzVlhoV01GWnZZbTFXY2sxSWJGWmlWVFZ6Vld0YVZtVkdaRVpoUnpWT1ZsUldlbHBWVWxOVU1rcFdUbGR3WVZaV1NtaFpiRlY0VWpKV1JWVnJPVmRTYTNCeFYyeFdVMWxYUmxkWGJHUnNVa1pLVDFwWGRHRldWbVJHWVVjMVRsSlVWbnBhVlZKVFZERmFSbU5IY0dGV1ZrcHhWRlZhYjFOV2NEWlNhemxUWld0YWNWZHNWbE5oYXpWSFZsaG9WR0pWTlhOVmExcDNZMVprUm1GSE5VNVdWR3hXVlRKNFlWUnNXWGROVkU1WVVsZG9kVlJYY3pGV01sWkZWV3M1VTFKdVFuRlhiRlpUV1ZkR2MyRkZiR0ZsYXpWUFdXeFdkMU5zWkVaaFJ6Vk9VbTVDV1ZwVlpFOWlSa3BIVm1wV1dGSlhhSFZVVlZVeFkyMU9SMUpzYkZSU01rNDBWakZhWVdFeGEzbFdhMVphVFROQ1QxWnFRbUZoYkhCV1ZXMUdhR0pWTlVoV01uaGhZVlprUmxOdWNGZGlXR2N3Vkd0VmVFNXNSblJVYlhoVFVteHdkbFl3Vm05aWF6QjRZa1prYkZKR1NsQldha0poVmpGYVdHVkZPVmRXYldoS1YycE9kMVJ0U2tsYWVrSlZZa1pLYUZwWGVHOVRWbkEyVTJzMVRsZEhZM2RXUjNSVFlURnJlVlpyVmxwTk1sSmFWVEJrYW1WV1VsZFhhbEpQVWxSV1ZsWXllR3RXUjBweVYyeGFXRkpYYUhWVVZsVXhVakpXUlZWck9WTlNia0Y1VmpCV2IySnJNVlpOU0doc1VrWktVRlpyV25kTk1XUkdZVWMxYkdGNlZucFdSekZQWWtaS1IyTklSbGhTVjJoMVZGUkJlRkl5VmtWVmF6bG9ZbGRvY1Zkc1ZsTldhekZ6V2tWYVZHSnRlRmhVVm1odVRVWlNkRTFXVGs5U2JGcDZXbFZTVTFReVJuTlNhazVWVFZadk1GUnJWVEZXVm1SMFZHMTRVMUp0ZHpGV01GWnZZbXN4Ums5VlpHeFNSa3BRVm10YWQxWkdaRmhOVkZKYVRXeGFSbGRVVG10WFZrNUlXVE53VlZac2NGaGFSVnB2VTFadmVtTkZPVmRsYkZweFYyeFdVMVV5UlhoVGJrNXNVa1pLVUZaclZuWmxSbVJHWVVjMVRtRjZRak5XTWpFd1lVVXhXVnA2UWxWaE1sSlVWakJhZDFJeVZrVlZhelZzWWtWd2IxWnRlR0ZPUlRWR1RsWldWR0pHU2xwVk1HUnFaVVpTY2xWcmRGcE5iRnBHVmxaU1MyRnRTa2xhZWtKVllUSlNXRmRVU2xkU1ZscFZWV3hzVkZJeVRqWldSbFpoVGtVMVJrNVdWbWhTYXpWWVZGY3hibVZHWkVaaFJ6Vk9WbFJXU0ZwVlVsTlVNVnBJVlcxd1lWWldTbkZVYTFwdlUxWndObFJyT1U1aGVsWnhWMnhXVTFSdFZsZGhSV3hoWld0YVVGbHJhRzVOUmxKeVZXeGtXazFzV2taV2JGSkhWMVpPU0ZremJGaFdNMEo2V1hwR2MxWXlWa1ZWYXpsT1lURndjVmRzVmxOV2F6RnpZVVZzWVdWck5XRldiWGgzWVd4d1ZsVnJOV3hXYldoS1YyNXdUMVF4U2xWaVIzQmhWbFpLVjFwWGVHOVRWbTk2WTBVMVUxSXphSEZYYkZaVFZXczFSMkZGYkdGbGExcFFWRlpvYmsxR1VuUk5WWFJhVFd4YVJsWnNhSE5XTWtwV1YyMXdZVlpXU21oWlZFWnZVMVp3TmxKck5XbFRSMk4zVmtkMGExUXhXbkpOVldSc1VrWktVRmxYTVc5aGJIQldWV3hPYVZadGFFcFhibkJMVkdzeFIyTkhjR0ZXVmtwWFZGY3hUMVl4VG5SVWJYaFRVbTVDZGxac1pEUk9SVFZHVGxWb1dHSkZOVmhWYlhoM1lXeHdWbFZzU2s5V2JIQjZXbFZTVTFReFNraFVhbEpZVWxkb2RWUlZXbmRqTWxaRlZXczVhR0V6UWtsV01GWnZZbXN4UjJKR1dtRlNNRFZ6Vld0YVYwNXNaRVpoUnpWT1lraENXRlV5ZUhOV2JVcElWVzVhWVZKc2NGUlhWRXBYVWxaYVZWSnNiRlJTTWs0MFZrZDRZVTVGTlVaT1ZGcG9Vak5DY0ZWdE5XNU5SbEp5V2tWa1RsSnNjRWhhVlZKVFZESktWMU50Y0dGV1ZrcHhWR3RhVm1WSFZrVlZhemxYVWxoQ2NWZHNWbE5aVjBaWFlVVnNZV1ZyTlU5VmJUVnVUVVpTZFdOSE9WZE5WMmhLVjJwT2QxUnNTblZhZWtKVllrWkthRmRVU2xkU1ZtUjBUVlp3YVZkRk5EQldiVEY2WlVacmVWWnJWbGRXUlVwYVZUQmthbVZHVW5SbFJGSlBVbFJXVmxaWE1VOWlSa3BIWWtSU1dGSlhhSFZVVjNoM1VqSldSVlZyT1d4aVYyaHhWMnhXVTFack5WZGFTRTVZWWxVMWMxVnJXbFpsVm1SR1lVYzFUazFFVWpWVmJUVlBZV3hLZFZwNlFsVmlSa3BvVjFSS1YxSldXbFZTYld4VVVsVndVVll4WkRST1JUVkdUbFZXWVZKNmJGVlphMlJUVFZaa1JtRkhOVTVOUkVaSFZERmtUMkpHU2tkV1dHUlZWak5TTTFkVVNsZFNWbFpWVm14b2FXSnJTbkZYYkZaVFZXMVdWMWRzYUZSaVZUVnpWV3RhZDJNeFpFWmhSelZPVWxSR2VscFZVbE5VTVZwSVlVZHdZVlpXU2xoWlZWcHZVMVp3TmxKck9VNVhSMk4zVmtab2QxSXhhM2xXYTFaV1lsZDRXbFV3WkdwbFJsSlZVbTFHVjAxWGFFcFhibkJQVkRGS2RWcDZRbFZpV0VKVVYxUktWMUpXVmxWVWJHeFVVakpPTmxaR1ZtRk9SVFZHVGxaV1ZtSlZOWE5WYTFwWFRsWmtSbUZITlU1aVIzUTFXbFZrVDJKR1NrWk5TR2hYWWtadk1GUnJWWGhPYkVwMFZHMTRVMUp0ZEROV01GWnZZbTFXY2sxSWFHeFNSa3BRV1ZkNFlWSXhaRVpoUnpWc1lYcHNXRnBWVWxOVU1WcElWV3hPV0ZKWGFIVlVWM2h5WlVkV1JWVnJPVmRTYmtKeFYyeFdVMVV5U2tkV2JrWlVZbFUxYzFWclpFNU5SbVJYVjJwU1QxSlVWbFpXVnpGUFlrWktSMVpZY0ZoU1YyaDFXbGR6TVZkRk9WaGhSbXhVVWpKT05WWXhVazlSTVZsNFlVVnNZV1ZyV2xCV2JUVnVUVVpTZEUxVk9XdE5Wa1kwVmpJeFQySkdTa2RqU0VwWVVsZG9kVlJYY3pWU2JVNUhZVVpzVkZJeVRqVldNbmhoVGtVMVJrNVVXbEppVlRWelZXdGFTMk5HWkVaaFJ6Vk9WbFJXU0ZwVlVsTlVNa3BXWWtSU1YwMVdjRE5YVkVwWFVsWndTR0ZHYkZSU01rNHpWa1prTkZZeVJsZGhSV3hoWld0YVVGVnROVzVOUmxKeVZXMUdXazFzV2taV1Z6RjNWMVpPU0ZremFGVmhhMXBVVjFSS1YxSldWblJoUm14VVVqSk9ORlpIY0VkT1JUVkdUbFpXVkdKVk5YTlZhMXBXWlZaa1JtRkhOVTVXYlhoYVZsY3hUMkpHU2tkVGJrcFhZV3R3ZGxkVVNsZFNWbHBWVkcxR1YySnRZM2RXUnpCNFZERmtjMkZGYkdGTk0wSlBXV3RvYmsxR1VuTlZiWFJYVFZkU2VscFZVbE5VTWtwV1kwZHdZVlpXU2xkVVZsVjRWakpXUlZWck9XbFdWemg0VmpCV2IySnJNVlpPV0U1c1VrWktVRmxzVm5kWFJtUkdZVWMxVGxaVWJFaFdNblJoVjFaT1NGa3phRmhXYkc4d1ZHdFZNVk5HVG5OalJtUnBVMGRqZDFaSE1YZFZNV3Q1Vm10V1ZWZEhVbHBWTUdScVpWWlNjbFp0UmxwTmJGcEdWbGN4TkZkV1RraFpNM0JWWVRKU1RGZFVTbGRTVmxaVlZHczVWMkp0WTNkV1J6RjNZakZyZVZaclZsWmlXRkp3VlcwMWJrMUdVbk5WYmtwc1VtMW9TbGR1Y0VkVU1rcEpXbnBDVldKR1NuSlhWRXBYVWxaU1ZWSnNiRlJTTWs0MVZrWmFhMUp0VmxkVWJsWlZZbFUxYzFWclduTk9iRlYzV2tSU1drMXNXa1pXTVdodlYxWk9TRmt6YUZWV2VrSTBWMVJLVjFKV1pGVlZiRlpUWW10S1NsZHNWbTloTVd0NVZtdFdWMWRJUWxoV2ExWmhWMnhhVlZKcVVrOVNWRll3VlRJeFQySkdTa2hVYWs1WVVsZG9kVlJYY3pWV01sWkZWV3M1VjFKdVFtRldNRlp2WW1zeFJrMVlWbGhpVlRWelZXdGFWbVZXWkVaaFJ6VnNZWHBHV0ZVeWRHOVdWMFY0Vmxob1dGSlhhSFZVVlZVeFl6SldSVlZyT1ZOTlZuQmhWakJXYjJKck1WWk5XRTVXWWxkNFdGVnRlSGRoUm1SR1lVYzFUbFpVVmxaVlZ6RlBZa1pLUjJFelpGcFdNMmN3Vkd0Vk1XTldXblJVYlhoVFVtNUNlRll3Vm05aWF6RldUVmhPYUZJd05YTlZhMXBMWTJ4a1JtRkhOVTVTVkZaSVdsVlNVMVF4V2tkalIyaFhVbTFSTUZkVVNsZFNWbHAwWVVac1ZGSXlUak5XUnpFMFRrVTFSazVXVm1GU2JYaGFWVEJrYW1Wc1VsWldiWFJZVW0xb1NsZHVjRWRVTWtwSlducENWV0V5VWxoVk1WcHZVMVp3TmxKc1FsZFNWRlp4VjJ4V1UxbFhSbk5oUld4aFpXdGFVVlZ0Tlc1TlJsSjBZMFYwVTAxcmJ6SlZWM2hYWVVVeFYxZHRjR0ZXVmtwUFdsVmFjbVZHWkhOYVIzUlRZbTFqZDFaSGVGTlZNbEpJVm10a1ZXSlZOWE5WYTFwWFRsWnNjbUZGU210TlYyaEtWMjV3UjFReVNrbGFla0pWVjBoQ1JGZFVTbGRTVmxwVlUyMXNUbGRIWTNkV1J6RjNVekZyZVZaclZsaGlWM2hhVlRCa2EwNXNVbGRYYWxKUFVsUlZNbFV5Y3pGV1JrbDVZVWh3VjFZelp6QlVhMVV4VWxaa2NtUkdXbE5pYldOM1ZrZDRVMk15VFhoaFJXeGhaV3RhWVZZd1pGTmlNV3h5VjJwU1QxSlVWVEpWVnpGUFlrWktSMVpZYkZoU1YyaDFWRlpWTVZZeVZrVlZhemxwVm10d1NWWXdWbTlpYXpGeVQxVm9WR0pWTlhOVmExcEdaV3hrUm1GSE5VNWhlbXhJV2xWU1UxUXhTWGRYYlhCaFZsWktWMVJVU2t0ak1sWkZWV3M1YkdFd2NIRlhiRlpUVlRKR1YxcEdaR0ZTTURWelZXdGFTMkl4YTNsTlZYUlVWbTFvU2xkdWNFTlViVXBKV25wQ1ZXSkdTblpXVkVwTFVteGtXV05HYkZSU01rNDBWa2QwVTFJeFdYbFVXR3hWWWtkU1YxbHJhRzVOUmxKelZXMDVXazFzV2taV01XaHpWMVpPU0ZrelpGVmhhMWt3Vkd0VmVFNXNTblJVYlhoVFVteFdNMVpzVWtkT1JUVkdUbFZXWVZKck5WcFZNR1JxWld4UmVGZHRkR3BOVjJoS1YyNXdTMVZHU25WYWVrSlZZbTVDVUZadGVHOVRWbTk2WTBVMVUySnRZM2RXUm1oM1ZUQXdlR0pJU21oU1ZHeHdWVzAxYmsxR1VuTlZhM1JhVFd4YVJsWldVa3RXUjBwSlducENWV0pHU2tSV2JYaHZVMVp3TmxOc2NHbFdhM0JXVmpCV2IySnJNWEpOVm1oc1VqQTFjMVZyWkU5Tk1XUkdZVWMxVGxaVVZucGFWVkpUVkRGYVIxZHVjRmRTTTJjd1ZHdFZNV05YUmtoaVJrNU9ZbGRvY1Zkc1ZsTlZNa1pIWVVWc1lXVnJXbEJVVm1odVRVWlNkRTFXWkd0TlZWWTBXbFZTVTFReFdraGxSM0JoVmxaS1YxUlVSbTlUVm5BMlVXczVWMkp0WTNkV1J6VjNZVEZyZVZaclZsaFhTRUphVlRCa2FtUXhVbkZTYWxKUFVsUlZNbFZYTVU5aVJrcEhZa1JTV0ZKWGFIVlVWbFV4WXpKV1JWVnJPVmRTYmtKTlZqQldiMkpyTVZaTlNHaHFVbXh3V2xVd1pHcGxSbVJYVjJzNVdrMXNXa1pXYkdoelYxWk9TRnBFV2xWV00yY3dWR3RWTVZaV1pIUlViWGhUVW10V05GWnRlR3RsYXpWWFlVVnNZV1ZyV2xCVVZtaHVUVVpTYzFWcmRGcE5iRnBHVm14U1ExVXlTblJWYlhCaFZsWktWMVJVU2t0V01sWkZWV3M1YkdKWGFIRlhiRlpUVjIxV1IyTkdhRTVXTURWelZXdGFSbVZXWkVaaFJ6Vk9WbFJzU0ZVeU1VOWlSa3BIWTBoR1dGSlhhSFZVVjNNMVVtczVWMXBGTlZOaWJXTjNWa1pvZDFZeVZuTmhSV3hoWld0YVVGWnFUbE5oYkhCV1ZXeGthRkl3TVRSYVZWSlRWREZKZUZkc2FGaFNWMmgxVkZkek1WSnNaSFJVYlhoVFVtMTNNRlpYTlhkV01XdDVWbXRXVm1KWWFGcFZNR1JxWlZaU1dHUkhkRnBOYkZwR1YxaHdVMWRXVGtoYVJGcFZWbXh3V0ZkVVNsZFNWbVIwWkVac1ZGSXlVVEpXUmxwaFRrVTFSazVWYUZoaVZUVnpWV3RhYzA1V1pFWmhSelZPVWxSV2VWa3dWbk5YVms1SVdUTm9WV0V5VWpOV1ZFWnJVakZPYzJGR2JGUlNNazQxVmtSQ2IxWXhhM2xXYTFaWFZrVktXRlZ0Tlc1TlJsSnlWV3RrV2sxc1drWlhXSEJUVjJzeFIyTkdRbUZTVm04d1ZHdFZNVlpXV25SVWJYaFRVbTVDZVZZd1ZtOWliVlp5VFZaa1lWSXdOWE5WYTFwelRsWmtSbUZITlU1aVIzaDRWbTB4VDJKR1NraFVXSEJZVWxkb2RWUldWVEZqVmtaeldrWnNWRkl5VGpWV01qQjRVekZyZVZaclZsaGlWM2hhVlRCa2EwNXNVbGRoUlhSVllrZG9TbGR1Y0VkVlJrcHlZMGR3WVZaV1NsZGFWM2h2VTFad05sTnJOV2xTTW1oeFYyeFdVMVZ0VmxkaFJXeGhaV3R3YUZscldrdFhSbXhXVjJwU1QxSlVWakJXYlRGUFlrWktSMU51U2xoU1YyaDFWRlZWTVdNeVZrVlZhemxYVWxoQ2NWZHNWbE5oYXpGSFlUTm9iRkpHU2xCVmEyUlRZV3h3VmxWdGNFNVNiV2hLVjI1d1MxZHJNVmRqUjNCaFZsWkthRmxVUm05VFZuQTJVMnhDVTJKdFkzZFdSM1JyVWpGcmVWWnJWbGRXUlRWYVZUQmthbVZXWkhOaFJVNWFUV3hhUmxaWE1YTlhSbHAwVld0NFdtVnJXVEJVYTFVeFZsWndTVkpzVG1sU01taFZWakJXYjJKck1WWk9TR2hzVWtaS1VGbFhNVzloYkhCV1ZXMXdUbFp0YUVwWGJuQkhWREZLZEZWdGNHRldWa3B4V2xkemVGWXlWa1ZWYXpsWFVsZDNNVlp0TVRST1JUVkdUbFZXVjJKVk5YTlZhMXBXWlVaa1JtRkhOVTVpUjNoNFdXdGFiMWRXVGtoWk0yUllZVEZ2TUZSclZURldWMFpJVkcxNFUxSnJXVEZYYkZaaFlURnJlVlpyVmxkV1JUVnhWV3hrVTJGc2NGWlZiRTVwVW0xb1NsZHVjRU5VTVZwSFYyMXdZVlpXU2xOVVYzaFRZekpXUlZWck9WZFNNbWhWVm0xNFlVNUZOVVpPV0VaVVlsVTFjMVZyV25kalZtdDNWMnBTVDFKVVZUSlZiVEZQWWtaS1IxWlVSbGRpV0dob1YxUktWMUpXYkRaVWJIQlhZbTFqZDFaR2FIZFNNV3Q1Vm10V1YxWkZjRlJVVmxwaFYyeGtSbUZITlU1aGVsWklXbFZTVTFReVJuUmhSM0JoVmxaS1YxUlhlRzlUVm5BMlVtczVVMkp0WTNkV1IzaFRXVlpyZVZaclZsWldSVnBZVm0wMWJrMUdVbGxqUldScFRWVldORlpYTVU5aVJrcEhVbGhzV0ZKWGFIVlVWM014VW0xS1IxZHRhR2xUUjJOM1ZrZDRVMWxXWkZkaVNFNXNVa1pLVUZWclpGTmtiR1JHWVVjMVRsWlVWa2hXVnpGUFlrWktSMVpZYkZoaE1XOHdWR3RWTVZOR1pIUlViWGhUVW0xME0xWlhlR0ZPUlRWR1RWUmFWMkpWTlhOVmExcEdUVVprV0dSSFJtcE5WbkJJV2xWU1UxUXhXa1pqUjNCaFZsWktUMXBXV2xkV01sWkZWV3MxYkdFelFuRlhiRlpUVm1zeGNrMVdaR3hTUmtwUVZtdFdkMkZzY0ZaVmJFcE9UVlpLZVZadE1VOWlSa3BHVFVob1ZtSllUWGhYVkVwWFVsWmFWVkZzYUdsU2JIQnhWMnhXVTFkdFZsZGhSV3hoWld0d2FGVnRkSGRoYkhCV1ZXeHdiRkpzY0RCVVZtUlBZa1pLUmsxSWFGcGlXR2N3Vkd0Vk1WTkdWbkphUm14VVVqSk9ORlpHWkRST1JUVkdUbFJhVm1GNlZsaFphMmhEWWpGa1JtRkhOVTVTYmtKSVdsVlNVMVF5U2xaaVJGSllVbGRvZFZwWGN6RlNNazVIVjJ4c1ZGSXlUalJXUm1RMFZERnJlVlpyVmxkV1JVcGFWVEJrYTA1c1VsaGxSMFphVFd4YVJsZFVUbmRXYXpGWlducENWV0pVUmxSWFZFcFhVbFpyZWxwR2NGZGliV04zVmtkNFUxbFdhM2xXYTFaWFZrVndWVmxyYUc1TlJsSjFZMFZrVjFZd2NFaFpNR1JQWWtaS1IyTklVbGRXUlZwb1YxUktWMUpXYTNwYVJUbHBVbFJXTmxZd1ZtOWlhekIzVFZWa2JGSkdTbEJWYWtaaFlXeHdWbFZzY0d4V2EzQjZXbFZTVTFReFdrZFhiWEJoVmxaS1QxcFZXbTlUVm5BMlVtczVhR0V3Y0ZsV01GWnZZbXN4YzJOSVRteFNSa3BRV1ZkMGQwMUdaRVpoUnpWT1ZsUldlbFl5TVU5aVJrcEhVMjVPV0ZKWGFIVlVWVlUxVTBkV1JrOVdiRlJTTWs0MFZrZHdSMDVGTlVaT1ZWWlhZbFUxYzFWcldrdGlNV1JHWVVjMVRrMUVSa2haYTFwclZtMUtTVnA2UWxWaE1VcG9XV3RhYjFOV2NEWlRiSEJPWW0xb1dsWnFTalJPUlRWR1RsVldXR0pWTlhOVmExcExZekZrUm1GSE5VNVNia0pZV2xWU1UxUXhXa1pqUjNCaFZsWkthRmxVU2tkU2JVNUhZVVpzVkZJeVRqVldNbmh2VVRGcmVWWnJWbFppVjNoYVZUQmthbVZHVW5OWGFsSlBVbFJXUmxZeWREQlhWazVJV1ROa1ZVMVdjRWhhUlZwdlUxWndObFJyTlZOTlJuQnhWMnhXVTFack1YTlhia3BxVWpBMWMxVnJXa3RrUm1SR1lVYzFUbFp0ZUZoV01qRkhWMVpPU0ZremJGaGlXR2N3Vkd0Vk1WWldVblJVYlhoVFVteFdOVll3Vm05aWF6RnpZMGhPYkZKR1NsQlVWM1JoWTFaV2MxVnNaRnBOYkZwR1ZteFNRMVp0U2tsYWVrSlZZa1pLV0ZkVVNsZFNWbVIwWWtac1ZGSXlUalpXUjNCSFRrVTFSazVXVmxoWFIxSllXV3hTYzJOR2JITlhiVVphVFd4YVJsZFVUbmRYYlVwSlducENWV0V4U25aVlZFWlhZekpXUlZWck9XaGhNMEpZVmpCV2IySnRWbkpPVm14VllsVTFjMVZyV2xabFJteFZVbXBTVDFKVVZsbFZiVFZ6V1ZaS1JsZHVTbFppV0djd1ZHdFZNV05XU25KaFJteFVVakpSTWxaSGVHRk9SVFZHVGxWb1YySlhhSE5aYkdodllVWmFkR1JIY0U1V01GWTBXbFZTVTFReFdraFZiWEJoVmxaS1YxUlhlRzlUVm5BMlVXMUdWMkp0WTNkV1IzUlRZakZrYzJGRmJHRk5NMEpQVkZjMWIxZHNaRVpoUnpWT1ZsUldlVlp0ZUhkVWJFcDFXbnBDVldKR1NsUlpNbmh2VTFad05sSnJPVmRpYldOM1ZrWm9kMUl4YTNsV2ExWllWMGhDV0ZscmFHNU5SbEp5V2tWa1drMXNXa1pYVkU1dlYxWk9TRmt6YUZWaVdHY3dWR3RWTVdSR1VuSlViR3hVVWpKT05WWkVSbUZPUlRWR1RsWldWV0pWTlhOVmExcEdaV3hrUm1GSE5VNWhla0kyVjJ0a1QySkdTa2RXV0d4V1ltNUNTRmRVU2xkU1ZtdzJWR3hzVkZJeVRqVldSbEpIVGtVMVJrMVVXbFJpVlRWelZXdGFWMDVXWkVaaFJ6Vk9WbFJTTkZwVlVsTlVNa1p5VjIxd1lWWldTbE5VVmxwdlUxWndObE5zY0U1WFIyTjNWa2N4ZDFJeVNraFNXR2hzVWtaS1VGcFhkRXRpTVZweVYyMTBXazFzV2taV1JtaHZWMVpPU0ZwRVdsVmhNbEpJVjFSS1YxSldaSFJqUm14VVVqSk9ObFpHVm1GWlZscHpZVVZzWVdWcmNHaFZiRnAzWVd4d1ZsVnNjRTlXYkZwNldsVlNVMVF5U2xkWGExSlhZa1p2TUZSclZURldWbFp6V2tac1ZGSXlUalZXUjNSdlZESkdSMkZGYkdGbGExcFFXVlJPUTJGc2NGWlZiWEJPVm0xb1NsZHVjRWRYYkdSSlVXMXdZVlpXU2xOYVZscHZVMVp3TmxKck9WZE5TRUpYVmpCV2IySnJNVVpPV0ZKb1VqQTFjMVZyV2xabGJGcHlWbTVrV0ZKdGFFcFhibkJIVkcxS1NWcDZRbFZpUmtwb1YxUktWMUpXWkZWUmJHaFhZbTFqZDFaSE1YZFVNV3Q1Vm10V1ZsWkZjSEJWYlhoTFZrWmtSbUZITld4aGVrWjZXbFZTVTFReFNYaFdXR2hYWWxobk1GUnJWWGhPYkVwMFpFWnNWRkl5VGpaV1IzQkhUa1UxUms1VmFGWmhNbEp2VkZSS05GZEdaRVpoUnpWT1lrZDRlbHBWVWxOVU1WcEhZMFphVjJKWVp6QlVhMVV4VWxaYWRGUnRlRk5TVkVJMFZqQldiMkpyTVZaTldFNXNVa1pLVUZaclpEUmhiSEJXVld4YVRtSkhhRXBYYm5CSFZESktTVnA2UWxWaWJrSlFWa2Q0WVdNeVZrVlZhemxUVFZadk1WWXdWbTlpYXpGeVRWWmFhRk5IVW05VmJGSkhaV3haZUZWclpGZGhla1o0VlcweFQySkdTa2RUYmxKWVVsZG9kVlJYYzNoak1sWkZWV3M1VTFKdVFrMVdWM0JIVXpGcmVWWnJWbGRXUmtweFZXMDFiazFHVW5OVmJUbGFUV3hhUmxac2FITlhWazVJV1ROb1ZXRnJjSFpYVkVwWFVsWnNObEpzYkZSU01rNDBWa2QwWVZZeGJGaFViazVzVWtaS1VGbFhlR0ZoYkhCV1ZXeEtUazFYYUVwWGJuQkhWREpLU1ZwNlFsVmhNVXBZVjFSS1YxSldXbFZTYkd4VVVqSk9OVll4WkRST1JUVkdUVlJhYVZKc1NsWldiVEZ2VWtaV2MxZHFVazlTVkZaV1ZqSjRhMWRXVGtoWk0yaFlWbXh2TUZSclZURldWbkJHVDFac1ZGSXlUak5XUnpCNFRVWnJlVlpyVmxwbGJGcFlXV3hvVTJGc2NGWlZiRnBPWWtac05GZHJWbk5WYlVWNlZXMUdXRkpYYUhWVVYzaDNVMVpHY21GR2NGZGliV04zVmtkNFUxbFdhM2xXYTFaV1lsaG9XbFV3WkdwbFJsRjNWMnBTVDFKVVZuaFdiVEZQWWtaS1IxSllaRmhTVjJoMVZGWlZlR015VmtWVmF6bFRUVmhDY1Zkc1ZsTldiVlpYVjJ0a1dGZEhVbGhXYlRWdVRVWlNkRTFXU2s1V2JXaEtWMjV3UTFSck1YSlhiWEJoVmxaS1QxcFZXbXRqTWxaRlZXczViR0pHY0hGWGJGWlRWakpHUjJGRmJHRmxhelZoVm0wMWJrMUdVbkpWYTNSYVRXeGFSbFpzVWtkWFZrNUlXVE5zVlZZelp6QlVhMVV4WkVaYWRGUnRlRk5TYTFreFZqQldiMkpyTVZaUFZXUmhVakExYzFWcldsWmtNVlY1WlVkMFdrMXNXa1pXYkdoelYxWk9TRmt6YUZWaVZFVjNWMVJLVjFKV2NFaGhSbXhVVWpKT05GWXhXbGRaVjAxNFYydGtiRkpHU2xCV2ExWnpUbFprUm1GSE5VNVNia0pZV2xWU1UxUnRWbk5YYlhCaFZsWktWMVJYZUc5VFZtOTZZMFUxYVZOSFkzZFdSbWgzVW1zeFIyRkZiR0ZsYTBwb1ZteGFWbVZHVm5SamVrWlhWbTFvU2xkdWNFZFhiRmw1WlVaU1ZWWldiekJVYTFWNFRteGFkRlJ0ZUZOU01EUXlWakJXYjJKck1WWk9WbVJzVWtaS1VGbHNWbmRoYkhCV1ZXeGthRkp0YUVwWGJuQlBWREF4YzFOcmFGaGhNVzh3Vkd0Vk1WSldaSFJoUm14VVVqSk9NMVpIY0VkT1JUVkdUVlJhVjJKVk5YTlZhMXBMWXpGa1JtRkhOVTVTYmtKSVdsVlNVMVF4U2tkVGJGSlZZbGhuTUZSclZURldWbVIwVkcxNFUxSnVRbmxYVkVKaFRrVTFSazVWVm1GU01EVnpWV3RhVjA1c2JITlhhbEpQVWxSV1NWVnRNVTlpUmtwSFVsaG9WMVl6WnpCVWExVXhWbFpXYzFwR2JGUlNNazQwVmtkd1IwNUZOVVpPVldoV1YwZDRjMVZ0ZUV0V2JGcHpXa1pPVkZKdGFFcFhibkJIVkdzeFdWcDZRbFZoTVVweVYxUktWMUpXVm5SaFJteFVVakpPTTFaRVJtRk9SVFZHVGxoR1ZXSlZOWE5WYTFwR1pVWmtSbUZITld4aGVrWllWMnRrVDJKR1NrZFdhbFpZVWxkb2RWUlZWVEZqTWxaRlZXczVWMDFHY0hGWGJGWlRWRzFXUjFkdVJsUmhiRXB3VkZaYVYwNUdWWGxrUnpsWFVtMVNTRnBWVWxOVU1rcFdUbGR3WVZaV1NtaFpWM2hYWXpKV1JWVnJPVk5TYkhCdlYxUkNZVTVGTlVaT1ZsWllZbXhhY1ZWdGN6RmpiR1JHWVVjMVRtSkhkRFJhVlZKVFZERkplRk50Y0dGV1ZrcHhWR3RhYjFOV2NEWlNhemxUWWxkb2NWZHNWbE5YYXpGSFZXdGFUbFl3TlhOVmExcFdaV3hrUm1GSE5XeGhlbXhXVm0weFQySkdTa2RXV0d4WVVsZG9kVlJYZUhkU01sWkZWV3M1YkdFd2NFWldiVEV3V1Zac1ZrNVlUbXhTUmtwUVZtdGFkMDFXVlhsbFJGSlBVbFJXVmxsVlpITlZNREYwV2pOb1YwMVdiekJVYTFVeFpFWktkRlJ0ZUZOU2Exa3hWa1pXWVZkdFVYaGhSV3hoVFROQ1QxWnROVzVOUmxKeVZXNU9XazFzV2taV2JGSkxZVVV3ZDFOdGNHRldWa3BoVkd4YWIxTldjRFpTYXpWT1YwZGpkMVpIZEZOaE1rWnpZVVZzWVdWck5WQlVWbHAzWVd4d1ZsVnNTazVpUmxwNVdrVmtUMkpHU2tkV1dHUllVbGRvZFZSWGVIZFNNVTUwVkcxNFUxSXdNVE5XTUZadlltc3hWazVWWkd4U1JrcFFWbXRrYjJGc2NGWlZiWEJyVFZkb1NsZHVjRWRVYlVwSlducENWV0pZUWt4WFZFcFhVbFphVlZKc2JGUlNNbEV5VmtkNGIxUXhhM2xXYTFaWFZrVmFXbFV3WkdwbFZtUllaVWhrV2sxc1drWlhWRTUzVmxkRmVHTkhjR0ZXVmtwb1dWZDRiMU5XY0RaVWF6bFRUVWhDY1Zkc1ZsTmhNa1pIWVVWc1lXVnJTazlaYkdSdlYwWmtSbUZITlU1V1ZGWkpWMjV3UzFZeFNuVmFla0pWWWtaS2FGbHFSa1psUjBwSFlVWnNWRkl5VGpOV1J6RTBUa1UxUms1V1ZtaFNNRnBWVlcwMWJrMUdVbkphUldSb1VteHNNMWRyVWxOWFZrNUlXVE5vVldFeGJ6QlVhMVV4VmxaV2RWSnNTbWxUUjJOM1ZrYzFkMVF4YTNsV2ExWllWMGhDV2xVd1pHcGxWbVJWVkd0T1drMXNXa1pXVmxKVFYxWk9TRmt6YUZWaE1XOHdWR3RWTVdSR1ZuUlViWGhUVWpBd2QxWXdWbTlpYXpGV1RVaG9WR0pyY0hGVmJUVnVUVVpTZFdOSE9WcE5iRnBHVm14U1MyRkZNVlpqUlZaWFYwaENTRmt5ZUc5VFZuQTJWR3hDVjJKdFkzZFdSM2hUV1ZkT2MxZHVUbXhTUmtwUVZtdGFkMkZzY0ZaVmJGcE9UVmRvU2xkdWNFTlVNREYwWVVkd1lWWldTbGhaVlZwaFZsWkdkR1JHYkZSU01rNDFWakZhYTFVeGEzbFdhMVpWVjBkb1dsVXdaR3BsVmxKeVYyeGtXazFzV2taV2JHaHpZVWRLUm1OR1JsZFdNMmhVVm1wR2IxTldjRFpTYXpscFVtNUNjVmRzVmxOVmF6RnpZMFZzVldKVk5YTlZhMXB6VGxaa1JtRkhOVTVXVkZaNldUQmtUMkpHU2toVVdHaFhZVEZ2TUZSclZURmtSbHAwVkcxNFUxSnJXVEZXYWtKaFV6RnJlVlpyVmxkV1JUVnZWVzAxYmsxR1VuVmpSbVJhVFd4YVJsWnNVa05YVms1SVdUTm9WV0ZyTlU5YVZWcHZVMVp3TmxOck9WTmliV04zVmtkNFUxbFdhM2xXYTFaWFYwZDRXbFV3WkdwbGJGSnlWMnBTVDFKVVZsWldWelZUVjFaT1NGa3pjRlZOUm5CUVYxUktWMUpXV2xsaVJteFVVakpPTlZZeWRHOWhiVlpYVjFob2JGSkdTbEJaYkZVeFlVWmtSbUZITlU1aGVrWllXbFZTVTFReFNYaFhiWEJoVmxaS1UxUldXbTlUVm05NlkwVTVWMVp1UW5GWGJGWlRWVEpLUjFkclpHcFNNRFZ6Vld0YWMwNUdaRVpoUnpWT1ZsUkdNVmt3Vm10WFIwcEhWMjF3WVZaV1NrOWFSRVp2VTFad05sTnJPVk5OTUVwNlZqQldiMkpyTVZaT1dFNXNVa1pLVUZaclZuZGhiSEJXVld4YVQxSnRhRXBYYm5CTFZHMUtTVnA2UWxWaE1VcFlWRlZhYjFOV2NEWlRhelZYWVRKM01GWXdWbTlpYXpCM1RWVmtiRkpHU2xCV2EyUnZZV3h3VmxWc1drOVdiV2hLVjI1d1QxZHNXblZhZWtKVllUSlNTRmRVU2xkU1ZtdDZZMFpzVkZJeVRqUldSM0JIVGtVMVJrNVdWbGhoZW14YVZUQmthbVF4VVhkWGJrNWFUV3hhUmxaR2FIZFhWazVJV1ROd1ZWWldiekJVYTFVeFZsWmFkRlJ0ZUZOU2JYY3hWakJXYjJKck1WWk9WVnBZWVd4d1dsVXdaR3BsUmxKeFVtcFNUMUpVVmxaV1YzUXdWakF4Vm1OR2FGaFNWMmgxVkZkek1WSXlWa1ZWYXpsWFVteHdWVll3Vm05aWF6RnpZMFZrYkZKR1NsQmFWM2hMVlVaYWNWSnFVazlTVkZaR1YydGtkMWRXVGtoWk0zQlZZV3RaTUZSclZURldWbVIwVkcxNFUxSnJWalpXTUZadlltMVdjazVXWkd4U1JrcFFXbGN4VTFac2JITlhhbEpQVWxSV1JsWXlNVTlpUmtwSFZsaHdXRkpYYUhWVVYzTjRWakpXUlZWck9WTlNia0paVm10a05GTXhhM2xXYTFaV1ZrVTFXbFV3WkdwbGJGRjNWMnBTVDFKVVZrbFdNakZQWWtaS1IxWllhRmhTVjJoMVZGWlZNVkp0VGtoVWJYaFRVbFJGTWxacldsTlNNV3Q1Vm10V1ZtSllhSEZaYkZaaFUyeHJkMXBIT1ZwTmJGcEdWbXhTUzJGV1duVmFla0pWWWxoQ2RsZFVTbGRTVmxaMFlVWmtUbGRIWTNkV1J6QjRWakZyZVZaclZscE5NbEphVlRCa2FtUXhVbFZTYkU1YVRXeGFSbFpHYUd0WFZrNUlXa1JhVlZac2NIcFhWbVJYWXpKV1JWVnJPVk5TV0VKWVZqQldiMkpyTVhKTlZsWlVZbFUxYzFWcldsZE9WbHBXVjJwU1QxSlVWbFpYYTFwWFZrZEtTRlZ0Y0dGV1ZrcFhXbFphYjFOV2NEWlNhemxwVW0wNU0xWXdWbTlpYXpGSFkwVmtXR0pyTlZoVmJYUnpUbFphU0dWRVVrOVNWRVV5VmtkNGExZFdUa2haTTJSVllsUkdVMVJWV2xOamJGcFZVbXhzVkZJeVRqTldSekY2VFZacmVWWnJWbGRXUlZwYVZUQmthbVZHVW5SbFJUbG9WbTFvU2xkdWNFZFVNVnAxV25wQ1ZWZElRbGhhVjNodlUxWndObEpyT1ZkTk1VcHZWakJXYjJKck1VZGlTRkpWWWxVMWMxVnJXbFpsVm1SR1lVYzFUbFp0ZUZoYVZWSlRWREZhU0dWSGNHRldWa3BoV2xaYWIxTldjRFpSYXpsWVVtdHdVMVl3Vm05aWF6RldUbGhPYkZKR1NsQlpiRnBMVlRGU1YxZHNaRnBOYkZwR1ZrWm9jMVJzV2xWaVNFSldZbGhTTTFkVVNsZFNWbFpWVld4c1ZGSXlUalJXUjNSaFRrVTFSazVXVm1oU01EVnpWV3RhY21ReFpFWmhSelZPVmxSc1NGcFZVbE5VTVZwR1kwWnNXRkpYYUhWVVYzTTFVMVphZEZSdGVGTlNiRll6Vm0xMFYxSXhhM2xXYTFaVlYwZG9XbFV3WkdwbFZsSlpZMFYwV2sxc1drWldiRkpMVlRGYWRWcDZRbFZpUmtwWVYxUktWMUpXWkhSaVJteFVVakpSTWxaRVJtRk9SVFZHVGxoU1ZXSlZOWE5WYTFwelRsWmtSbUZITlU1U1ZGWmFWVmMxYjFZd01WbGFla0pWWWxSR1VGZFVTbGRTVmxwVlUyeGFUbGRIWTNkV1IzaFRZekZyZVZaclZsZFdSVFZhVlRCa2FtUXhVblJsUkZKUFVsUlZNbFpITVU5aVJrcEhZa1JTV0ZKWGFIVlVWVlV4VjBkV1NGUnRlRk5TYlhjd1ZqQldiMkpyTVhKT1ZtUnNVa1pLVUZsc1ZuZE5NVnBGVW1wU1QxSlVWbFpaYTJSUFlrWktSMk5JUWxoU1YyaDFWRmR6TlZORk5WaFViWGhUVW10d2VWWXdWbTlpYXpGR1RsaE9iRkpHU2xCV2ExWjNZV3h3VmxWdGNFNVdiWFEwV2xWU1UxUXhTa2hVVkVaWFRXNU9ORmw2Um05VFZuQTJVbXh3VjFadVFuRlhiRlpUVm1zeGNrMVdaRlJpVlRWelZXdGFSbVZzWkZkV2JVWmFUV3hhUmxac1VrZFhWazVJV1ROd1ZXRnJXVEJVYTFVeFkxWlNkRlJ0ZUZOU2ExWTJWakJXYjJKck1IZE9WV1JzVWtaS1VGWnJXbmRXUm1SR1lVYzFUbUpIZUhwYVZWSlRWRzFXYzFkdGNHRldWa3BVV1ZkNGIxTldjRFpTYkhCWFltMWpkMVpIZEZOVk1VbDRZVVZzWVdWcmNHaFphMmh1VFVaU2MxVnJPVmROVjJoS1YyNXdUMVJzU2tkalIzQmhWbFpLVjFwWE1VWmxSMVpGVldzMWJHSllhR0ZXTUZadlltc3hWazFZVG1oU01EVnpWV3RhUjA1V2EzaFhiWFJxVFZkb1NsZHVjRWRVTWtwR1RsWnNXRkpYYUhWVVYzaDNVakpXUlZWck9WZFNia0V5VmpGU1IwNUZOVVpPVlZaWVlsVTFjMVZyV25KTlJtUkdZVWMxVGxKdVFucFdNakZQWWtaS1IxSllhRlpOYm1jd1ZHdFZNVk5HVG5SVWJYaFRVbXhWZUZZd1ZtOWlhekZXVGtob2JGSkdTazlhVjNoaFlXeHdWbFZzVG1sV2JXaEtWMjV3UzFSck1YVmhSRTVZVWxkb2RWUldWVFZYUms1MFZHMTRVMUpyVmpWV2EyUTBUa1UxUms1VmFGaGhlbFphVlRCa2FtUXhVbkZTYWxKUFVsUlZNbGxWVW1GWFIwcEhWMjF3WVZaV1NsZGFWbHBXWlVaV2RGUnRlRk5TVkVVd1ZqQldiMkpyTVVkaVJtUnNVa1pLVUZWclpHOWhiSEJXVld4YVRsWnRhRXBYYm5CTFYyMUdjMWR0Y0dGV1ZrcFhWR3RhVjJNeVZrVlZhemxYVWpGS01sZHJXbUZWTVd0NVZtdFdWMVpGV2xwVk1HUnFaVVprVjJGSGRGcE5iRnBHVmpGb2QxZFdUa2hhUkZwVlZqTm9hRlZ0ZUdGV01sWkZWV3M1YVZaWGMzaFdNRlp2WW1zeFZrMUlhRlJpUjNoVFdXdG9iazFHVW5KVmJFNVhUVmRvU2xkcVRuZFViRXAxV25wQ1ZXSkdTbWhYVkVwWFVsWmtkRTFXY0dsVFIyTjNWa2N3ZUZNeGEzbFdhMVpWVjBkb1dsVXdaR3BrTVZKeFUydGtXazFzV2taV1JtaDNWMVpPU0ZremJGVk5SbTh3Vkd0Vk1WWldXblJVYlhoVFVteFdOVlpHWXpGaU1ERkhZVVZzWVdWcldsQlphMmh1VFVaU2RFMVdTazVXYldoS1YyNXdRMWxYU2tsYWVrSlZZbGhDVUZWcVJtOVRWbkEyVTJzNVUxWnVRbkZYYkZaVFYyMVdSMU5xV2xkaGVteFdWbTAxYmsxR1VuSlZiRTVhVFd4YVJsWnNVa3RXUjBwSlducENWV0pHU21oWFZFcFhVbFpTV1dKRk5WZGliV04zVmtkMGExbFdhM2xXYTFaWVYwZDRWRmxyYUc1TlJsSnlXa1ZrV2sxc1drWldWbEpUVjFaT1NGa3phRlZoTVc4d1ZHdFZNVlpYUmtoa1JtaHBVMGRqZDFaSE1YZFNiVlpYWVVWc1lXVnJXazlaYTJodVRVWlNjbHBGT1ZwTmJGcEdWbXhTVDFkV1RraFpNMmhWWVRGdk1GUnJWVEZUUmtwMFZHMTRVMUpzVmpaV2JHUTBUa1UxUms1V1ZsaGlWVFZ6Vld0YWQyTldVblJsUm1SYVRXeGFSbFl5TVRCVk1rcElWVzVDV0ZKWGFIVlVWM2gzVWpKV1JWVnJPV2hoZWxJMlZtMHhORTVGTlVaT1ZWWmhVakExYzFWclZYaE9SbkJGVTJzNVdrMXNXa1pXTWpFd1ZUSktTRlZ0T1ZaaVdHY3dWR3RWTVdSR1VuUlViWGhUVW10d2VsWXdWbTlpYXpGV1RWaE9iRkpHU2xCVmEyUlNUVVpXTmxKcVVrOVNWRlpXV1d0b1MxZFdUa2haTTJ4VlRVZE5lRmRVU2xkU1ZsWjBaRVpPYVZOSFkzZFdSM2hUVXpGcmVWWnJWbGRXUmxwYVZUQmthbVZXVWxWUmJHUmFUV3hhUmxaWE1UUlhSMHBKV25wQ1ZXRXlVbFJaZWtaclkyeGtjMWRzYkZSU01sRXlWa1phYTJJeGEzbFdhMVpZWWxkNFdsVXdaR3BsUmxKVlVtcFNUMUpVUlRKVmJYaGhZVEF4Y2xkdGNHRldWa3B5V1ZWYVUyTXlWa1ZWYXpsb1lURndkMVl3Vm05aWF6RkdUa2hvYkZKR1NsQldhMVozWVd4d1ZsVnNXazlTYlZKWVdsVlNVMVF3TVhKWGJYQmhWbFpLVkZsVldsTmpNbFpGVldzNWFHSkdjSEZYYkZaVFZtc3hjMXBJVmxOaVZWcGFWVEJrYW1ReFVuTlhhbEpQVWxSVk1sWlhNVTlpUmtwSFZtcGFXRkpYYUhWVVZWcDNVakpXUlZWck9XbFdhM0J4VjJ4V1UxZHJOVWRoUld4aFpXczFVRlJXV25kaGJIQldWV3MxYkZKc1dubFVNVnBoVkd4S2RWcDZRbFZYU0VKWVYxUktWMUpXVmxWVmJGcHBVMGRqZDFaSE1IaFVNV3Q1Vm10V1YxWkZjRnBWTUdScVpERmtjMWRxVWs5U1ZGWldWVEZvYzFkV1RraFpNM0JWVFVad00xZFVTbGRTVmxwVlVtczFVMDFWY0hGWGJGWlRXVmRHUjJGRmJHRmxhM0JRVm1wT2IxWkdXWGRhUm1SYVRXeGFSbFpXVWtOWFZrNUlXVE5vVlZZelRURlhWRXBYVWxaYVdXSkdiRlJTTWs0MFZrZDBZVTVGTlVaT1ZsWllWMGRTV2xVd1pHcGxSbEowWlVSU1QxSlVSVEpWTWpGUFlrWktSazFVVWxkU1JYQk1WV3BHVDJOdFJraFViWGhUVW14V00xWnFRbTlSTVZwWFlVVnNZV1ZyV2xCWmEyaHVUVVpTV1dORk9WSk5WMmhLVjJwT2QxUXlTa2hsUmxwV1RXNVJkMWxVUm05VFZuQTJVbXM1YVZOSFkzZFdSM2hUVXpGcmVWWnJWbHBsYTFwYVZUQmthbVZHVW5KWGFsSlBVbFJXTUZaWGRHdFdNVXB5WTBod1dGSlhhSFZVVjNoM1l6SldSVlZyT1U1aE1YQnhWMnhXVTFack1IaFhXSEJXWW10d1lWcFhkSGRWTVhCV1YycFNUMUpVVmxaVmJURlBZa1pLUjJOSVJsZFdNMmhVV1ZaYWIxTldjRFpTYXpsWFVteHdjVmRzVmxOaGJWWnpZVVZzWVdWcldsQldiVFZ1VFVaU2RFMVZkR2hOVmtZMFdsVlNVMVF4U1hoVGJYQmhWbFpLVDFwVlduZFNNbFpGVldzNVUxSnVRbkZYYkZaVFYyMVdSMkZGYkdGbGEwcFFWRlpvYmsxR1VsbGpSbVJhVFd4YVJsWlhNVFJYVms1SVdUTnNWVlp0YUROV2FrWnJZekZhV1dKR2JGUlNNbEV5VmtaYVlVNUZOVVpPVldoWVlsZDRXbFV3Wkdwa01WSjBaRWhrVkZKdGFFcFhibkJMVkcxS1NWcDZRbFZoTVVwVVYxUktWMUpXV25SaFJteFVVakpPTkZaRVFtRlRNV1JIWVVWc1lXVnJjRkZWYlRWdVRVWlNkV05HWkZwTmJGcEdWbXhTUTFZd01WbGFla0pWWW01Q1QxcFZXbTlUVm5BMlVtczVhR0V6UWxsV01GWnZZbXN4Ums1V1pGZGlhM0JSVm1wS05GZEdaRVpoUnpWT1lrZDBOVnBFVG5kV01WcDFXbnBDVlZkSVFraFhWRXBYVWxaa1ZWRnNiRlJTTWs0MlZrZHdSMDVGTlVaT1dFWlhZbFUxYzFWclduZGpiRlp6VjJwU1QxSlVWVEpaYTJSUFlrWktSMVpZYkZoU1YyaDFWRmQ0YzFZeFpIUlViWGhUVW14V05WWXdWbTlpYXpGeVRWaE9iRkpHU2xCWmJGVXhZVVpyZUZkc1RscE5iRnBHVm14U1QxUXhXalppU0VaYVlUSm9SRlV3V25OV2JGcDBWRzE0VTFKcmNIcFdNRlp2WW1zeGMySkdaR3hTUmtwUVZXcEdTMlZXWkVaaFJ6Vk9WbTE0V0ZwVlVsTlVNVmwzVjJ4a1dGSlhhSFZVVmxVd1pVZFdSVlZyT1d4aE1IQnhWMnhXVTJGdFZuTmhSV3hoWld0YVVGWnROVzVOUmxKelZXMUdXazFzV2taV01WSkRWMVpPU0ZrelpGVmlWRVpRVld4YWIxTldjRFpSYkhCWFRVWndWVll3Vm05aWF6RnpZMFZrYkZKR1NsQlZha1pMWVd4d1ZsVnRjRTlTYlZKWVZsZDBUMWRXVGtoYVJGcFZWbFp3VEZWcVNrcGxiVXBJWkVac1ZGSXlUak5XUjNCUFlqSk5lR0ZGYkdGbGExcFFXV3RvYmsxR1VuUk5WWFJyVFZkb1NsZHFUbmRVYlVwSlducENWV0pHU21oWFZFcFhVbFpTV1dGR2JGUlNNazQxVmtaU1QySXhXbGRoUld4aFRUTkNUMVZyVm1GaGJIQldWV3hLVDFKdGFFcFhibkJIVkRKS1NWcDZRbFZpVkVaTVYxUktWMUpXWkZWVmJXaFhZbTFqZDFaSGVGTlRNVTVJVm10a2JGSkdTbEJXYTJRMFlXeHdWbFZzWkdoU2JIQjZXVEJrVDJKR1NrZFRiVGxZVWxkb2RWUlhjekZTVmtwMFZHMTRVMUp1UW5oV2JURTBUa1UxUms1V2FGTmlWVFZ6Vld0YVJrMUdXa2hsUkZKUFVsUldNRlpITVc5WFZrNUlXa1JhVlZaRldUQlVhMVV4WTFkR1IxcEdiRlJTTWs0MFZrZDBZVTVGTlVaT1dGSlZZbGhDV2xVd1pHdE9iRkpYVjJwU1QxSlVWbFpaYTJSUFlrWktSMVpZYkZoaE1XOHdWR3RWTVZKV2NFaFViWGhUVW14Wk1sWXdWbTlpYXpGellraE9XR0pWV2xwVk1HUnFaVlpTVjFkcVVrOVNWRll3VlRJeFQySkdTa2RqU0ZKVlZsWndWRlpxUm5kU2JWSklWRzE0VTFKc1ZqWldWM2hUVmpGcmVWWnJWbFpXUmtwV1ZGWmFXazFHWkVaaFJ6Vk9WbFJXTUZadE5VdFZNa3AwWlVkd1lWWldTbGRVVjNodlUxWnZlbU5GTldsaE1IQnhWMnhXVTFVeVJsZGhSV3hoWld0YVVGbHJhRzVOUmxKWlkwVk9XazFzV2taV1JtaHZWMVpPU0ZrelpGVmhhMXBVVjFSS1YxSldaSFJqUjJoVFltMWpkMVpIZEd0WlZsbDNUVWhvYkZKR1NsQldhMVozWVd4d1ZsVnNjRTlTYldoS1YyNXdSMVF5Um5KVGJrcFlVbGRvZFZSWGVITmpNbFpGVldzNWFHSkZjRFpXYTFwdllqRmtSMkZGYkdGbGExcFJWVzAxYmsxR1VuUmpSazVhVFd4YVJsWXlNWE5YYkZwMVducENWVmRJUWxCWFZFcFhVbFpXV1dKR1VtbFNNMmh4VjJ4V1UyRXlSa2RoUld4aFpXdEtZVlpyVmt0alJsWnhVbXBTVDFKVVZsWldNbmhyVjFaT1NGa3piRlZXUlZrd1ZHdFZNVkpXY0VoVWJYaFRVakEwZWxZd1ZtOWlhekZ5VFZaa2JGSkdTbEJXYTFwM1YwWmtSbUZITlU1U2JYaFlWa2Q0VjFkV1RraFpNMmhWWVRGYWFGWnJXbTlUVm5BMlVtczFhVk5IWTNkV1J6QjRVMnMxVjFkdVRsWmlWVFZ6Vld0YWQyTldWWGxsUjNSYVRXeGFSbFpzVWs5WFZrNUlXVE5rVldGcmNIWlhWRXBYVWxacmVtRkdiRlJTTWs0MFZrZHdTMDVHYTNsV2ExWlhWa1Z3V2xVd1pHcGxSbEpWVW0xR1drMXNXa1pXTWpFd1YxWk9TRmt6YUZWaVZGWk1WMVJLVjFKV1pGbGlSbEpUWWtoQ2NWZHNWbE5WTWtwSFYyNUdVbUp0VWxwVk1HUnFaREZrV0dWSVRtcGlWVnBKVkd4Vk1WZFdUa2haTTJSVllsaG5NRlJyVlRGV1ZrNXhVV3hzVkZJeVRqTldNblJoVGtVMVJrNVdWbGRpVlRWelZXdGFjbVF4V1hsbFJGSlBVbFJXU1ZaWE1VOWlSa3BIWTBoR1YwMXVVbWhXYWtadlUxWnZlbU5GTlZkaWJXTjNWa2Q0VTFNeFpFZGhSV3hoWld0YVVGUldXbmRWUm1SR1lVYzFUbEpVYkVoYVZWSlRWREZhU0dWSGNHRldWa3BQV2xkNGIxTldjRFpVYXpWVFltMWpkMVpIZUZOV01rWlhVMjVPYkZKR1NsQlpiRnB6VFRGYWNscEVRbGRoZWtaWFZHeG9UMWRXVGtoWk0yaFlWbXh2TUZSclZURk9iRlp6Vm14c1ZGSXlUalZXTW5SdllqRmFSMVp1UmxKaVZUVnpWV3RWZDJReFpFWmhSelZPVFZkNFdGWXlNVTlpUmtwR1RWUk9WMkpZWnpCVWExVXhaRVprZEZSdGVGTlNiWGN4VjFaU1IwNUZOVVpOVkZwVFlsVTFjMVZyWkU5T2JHUlZVVzA1V2sxc1drWldiRkpMVjFaT1NGa3piRlZOVm04d1ZHdFZNVlpXVGxsYVJteFVVakpSTWxaSGVHRk9SVFZHVGxSYVZXSkdjRzlVVm1odVRVWlNjMXBGWkZwTmJGcEdWMWh3VDFsV1NuVmFla0pWWVRGS2FGZFVTbGRTVm1SVlVXeHNWRkl5VGpOV1J6QjRVakZyZVZaclZsWldSVFZRVm0wMWJrMUdVbkphUm1SYVRXeGFSbFpYTVRCVk1VcDFXbnBDVldKR1NrdFVWM2h2VTFad05sSnJPV2xUUjJOM1ZrY3dlRlV4YTNsV2ExWlZWMGRvVmxSWGRIZGhiSEJXVld4S1RtSkhhRXBYYm5CRFYyeGFkVnA2UWxWaE1VcDJWbXhhYTFJeVZrVlZhemxvWWxkb1YxWXdWbTlpYXpGV1RsaE9iRkpHU2s5YVYzTXhZMnhrUm1GSE5XeGhlbFpJVmxjeFQySkdTa1pOVkZKWFRXcEZkMWRVU2xkU1ZsWjBaVVprYVZOSFkzZFdSM1JyVmpKV1IxWlliR3hTTURWelZXdGFkMk5XWkVaaFJ6Vk9WbFJXU0ZVeU1VOWlSa3BHVFZSV1dGSlhhSFZVVlZwM1ZsWmFjMXBHYkZSU01rNHpWa2QwVjFsWFJrZFZiazVzVWtaS1VGVnJXbUZoYkhCV1ZXczFUbFp0YUVwWGJuQkRWREpHTmxadGNHRldWa3BYVkd0YVMyTXlWa1ZWYXpsWFVqRktkbGRXVWtkT1JUVkdUVlJhVjJKVk5YTlZhMlJQVGtaWmVXVkhSbHBOYkZwR1ZteFNTMWRXVGtoWk0zQlZZV3R3U0ZkVVNsZFNWbEpaWVVac1ZGSXlUak5XTW5Sdll6SkdjMkZGYkdGbGEwcFFWbTAxYmsxR1VuTmFSV1JxWWtkb1NsZHVjRU5aVmtwMVducENWV0V4U2xSVmFrWkxWakpXUlZWck9WZFNNMmhYVm10a2VrNVdXbGRoUld4aFpXdHdZVlJXYUc1TlJsSnpWV3hrV2sxc1drWlhXSEJYVjFaT1NGa3piRlZoTVc4d1ZHdFZNVkpXVm5KYVJtUlRZa2QzTVZkc1ZtRmhNV1J6VjI1T2JGSkdTbEJXYTFwaFlXeHdWbFZyTlU1U2JXaEtWMjV3UzFReFduVmFla0pWWWxSR1RGZFVTbGRTVmxKWllVWnNWRkl5VGpSV1JFWmhUa1UxUms1WVJsUmlWVFZ6Vld0YVJtVnNaRVpoUnpWT1VsUldlbHBWVWxOVU1WcElZVWR3WVZaV1NsZGFWbVJHWlVkV1JWVnJPV2xXVkVJelZqQldiMkpyTVZaT1NHaHNVa1pLVUZacldrdFRNWEJGVVZob1drMXNXa1pXVmxKUFYxWk9TRmt6WkZWaVdHaHlXVlZhUzFZeVZrVlZhemxwVmxSV2RsWXdWbTlpYXpGSFkwVmtiRkpHU2s5YVYzTXhVa1prUm1GSE5VNWhla1pZVmxjeFQySkdTa2RXV0dSV1ZteEtTRmxWV205VFZuQTJVMnh3VGxkSFkzZFdSelYzVVRGWmVHRkZiR0ZsYTFwUVZtMDFiazFHVW5STlZrNWFUV3hhUmxkVVRtdFhWazVJV1ROc1dGWXpUalJXTUZwdlUxWndObE5zUWxOaWJXTjNWa2QwYTFJeFpFaFRibFpTWVROb1dGVnFUbTloYkhCV1ZXeGthRkp0YUVwWGJuQlBWREZhZFZGdGNHRldWa3B5V1ZWYWIxTldjRFpSYXpWcFVteHdjVmRzVmxOWGJWWlhWMnRhV0dKVk5YTlZhMXBXWld4a1JtRkhOVTVXVkZJMFdsVlNVMVF5U2xaWGJYQmhWbFpLVkZsVldsTmtSbHAwVkcxNFUxSnJWalpXYlRFd1ZqRnJlVlpyVmxkV1JWcGFWVEJrYW1WV1pGaGpTRTVhVFd4YVJsWXlNWGRYYlVWNFYycE9XazFXY0hKWmVrWmhZekpXUlZWck9WZFNWRlp4VjJ4V1UxZHRWa2hTV0doc1VrWktUMXBYZUdGaGJIQldWV3hhVGsxWGFFcFhibkJMVkd4YWRWcDZRbFZoTVVwWVdYcEdjMWRHV25WVGJYQlRZbTFqZDFaSE1YZFNNV3Q1Vm10V1YxWkZTbHBWTUdScVpVWlNjVkpxVWs5U1ZGVXlXVlZrVDJKR1NrZFdXR3hZVWxkb2RWUlZXbmRXTWxaRlZXczVWMUp1UWxGV01GWnZZbXN3ZDAxV1pGVmlSM2h2VlcwMVEyRnNjRlpWYkU1b1RWZG9TbGR1Y0V0WGF6RlpVV3RvVjJKWVFraFdWRVp2VTFad05sSnJPVTVYUjJOM1ZrZDRVMkV4YTNsV2ExWlhWa1Z3VmxsVVNtOWhiSEJXVld4YVQxWlVRalZhVldSUFlrWktSMVpVUWxoU1YyaDFWRmR6ZUdOc1duUlViWGhUVWxSRk1GWXdWbTlpYlZaeVRsVmtZVkpzV2xwVk1HUnFaREZrVjFkcVVrOVNWRlpXVjJ0YVQxZFdUa2haTTJoVllsaG5NRlJyVlRGa1JsSjBWRzE0VTFKVVFqVldiWFJxWlVacmVWWnJWbGhXUmtwWVZGZDBkMDFHWkVaaFJ6Vk9ZWHBDTmxkclpFOWlSa3BIVmxoc1ZtRnJXVEJVYTFWNFRteEtkRlJ0ZUZOU01ERTJWbTE0VTFGdFZrZGhSV3hoWld0S1VGUlhkR0ZoYkhCV1ZXeEtUbFl3Y0VsVmJURTBWMVpPU0ZremJGaFdNMmN3Vkd0Vk1VNXNSbk5UYkdSWFltMWpkMVpITUhoVE1XdDVWbXRXV0ZaR1NsTlVWbWh1VFVaU2RHTkZaR3BOVjJoS1YyNXdUMVJzU25WYWVrSlZZa1pLYUZadGVHOVRWbkEyVTJ4d2FWTkhZM2RXUm1oM1ZqSk5lRmR1VG14U1JrcFFXV3hhUzJSc1pFWmhSelZPVW0xNFdGZHJaRTlpUmtwSFkwYzVWMUl6WnpCVWExVXhUbXh3UjFac2JGUlNNazQxVmpGU1IwNUZOVVpPVldoVFlsVTFjMVZyWkU1bFJtUkdZVWMxVGxadGVGaGFWVkpUVkRBeGNsZHRjR0ZXVmtwVFdsWmFiMU5XY0RaU2F6bFhUVWhCZUZaV1pEUk9SVFZHVGxWV1ZtSlZOWE5WYTFwV1pERnNWVkpxVWs5U1ZGWlpWVzAxWVZkV1RraFpNMmhWVmtWYWFGcEhlRzlUVm5BMlZHeHdWMkp0WTNkV1J6RjNWREZKZUdGRmJHRmxhelZQVldwS2IxZEdaRVpoUnpWT1ZsUldXbFZYTVU5aVJrcElWRlJHV0ZKWGFIVlVWbFV4WTFaR2MxcEhiRTVoTTBJMVZqQldiMkp0Vm5KTlZteFVZa1ZLV0ZscmFHNU5SbEowVFZVNVYySkhlREJVVm1SUFlrWktSMVpxVmxoU1YyaDFWRlJCZUZJeVZrVlZhemxYVW14d2NWZHNWbE5aVjBWM1RsWm9UMVpVVmxSWmEyaHVUVVpTYzFWcmRFNVNiWFEwV2xWU1UxUXhTa2RYYmtwWVVsZG9kVlJXV25OV01sWkZWV3M1VTAxVmNIRlhiRlpUV1ZkR2MyRkZiR0ZsYTFwaFZteGFkMWRXV1hkaFJVNWFUV3hhUmxac1VrOVdNVnAxV25wQ1ZXRXhTbkpWZWtaclUwWmFkRlJ0ZUZOU2ExWXpWakJXYjJKck1VWk9XRTVvVWpBMWMxVnJXbGRPVmxweFUyMDVUbFpzY0VoYVZWSlRWREZhU0ZWVVFscE5ibWN3Vkd0Vk1XTldXblJVYlhoVFVteFdObFl3Vm05aWF6RkhZa1phYVZJd05YTlZhMXBXWlZac2NscEVVbGRXYldoS1YyNXdSMVJ0Um5KalJrSllVbGRvZFZwWGN6RldNV1IwVkcxNFUxSnJWalpXTUZadlltc3dkMDlWWkd4U1JrcFFWV3BHWVdGc2NGWlZiSEJPVm0xb1NsZHVjRU5VTWtwSlducENWV0pVUmt4WFZFcFhVbFpzTmxac2JGUlNNazQwVmtjeE5FNUZOVVpPV0ZKVVlrZFNXVlZ0Tlc1TlJsSnpWVzEwVkZJeFdrcFZWekZQWWtaS1IxWllhRnBpV0djd1ZHdFZNVTVzUm5WalJteFVVakpPTlZaR1dtRk9SVFZHVGxoU1ZXSnRVbGhaYTFwaFpXeHJkMWRxVWs5U1ZGWXdWa2N4VDJKR1NrZGlSRlpZVWxkb2RWUlZWVEJsVjBaSVZHMTRVMUpyY0haV2JYQkhUa1UxUms1WVVsZGlWVFZ6Vld0a1QwMHhaRVpoUnpWT1VtMTRlbGRyWkU5aVJrcEhZMGhLV0ZKWGFIVlVWVlV4WXpKV1JWVnJPV3hpUm5CWFYxY3hORTVGTlVaT1ZsWllZbFUxYzFWcldsWmxWbHBZWTBWMFdrMXNXa1pYV0hCVFZrVXhXVnA2UWxWaVIxSklWV3BHWVdNeVZrVlZhemxzWWxaS2NWZHNWbE5XYlZaellVVnNZV1ZyV2xCVVZtaHVUVVpTY2xwR1RrOVdiV2hLVjI1d1MxUXhTblZhZWtKVllURktjbGRVU2xkU1ZtUjBZMFpvVTJKdFkzZFdSM2hUVTIxV2MyRkZiR0ZsYTNCUVdsZDBZVmRXWkVaaFJ6Vk9Za2Q0ZWxwVlVsTlVNa1p5VGxkd1lWWldTazlhVlZwWFZsWk9kRlJ0ZUZOU2ExWTBWMnhXWVU1Rk5VWk9XRVpWWWxVMWMxVnJXa1psUm1SR1lVYzFUbUpIZERSWGEyUnpZVVV4V1ZGcVdsZGlXRUpFVjFSS1YxSldXbGxpUm14VVVqSk9NMVpIY0VkT1JUVkdUbGhHVTJKSFVscFZNR1JxWkRGa2MxZHFVazlTVkZVeVZUSXhiMVV5U2tsYWVrSlZZVEpTV0ZkVVNsZFNWbVJWVm14V1YySnRZM2RXUnpCNFV6RnNWMXBJVGxoaVZUVnpWV3RhUm1WV2JGWlhhbEpQVWxSV1ZsWkhlR0ZYVms1SVdUTm9WV0ZyV1RCVWExVXhVMFpLZEZSdGVGTlNiRlYzVm0xNGFrMVdVWGhoUld4aFpXdHdUMVp0ZEhkaGJIQldWV3hhVG1KSGFFcFhibkJIVjJ4YWNsTnRjR0ZXVmtwWVdWVmFiMU5XY0RaUmF6bE9WMGRqZDFaR2FIZFNNV3Q1Vm10V1ZtSlhlRmRVVm1odVRVWlNjMVZ0UmxwTmJGcEdWbTB4YjFkV1RraFpNM0JWWWtad1dGcEZaRXRTTWxaRlZXczVhR0pYYUZsV01GWnZZbTFXY2sxWVRteFNSa3BRVm10V2QyRnNjRlpWYXpWc1lrZG9TbGR1Y0VkVU1rcEpXbnBDVldFeFNsaFhWRXBYVWxaYWRHRkdXbWxUUjJOM1ZrZDBhMVV4YTNsV2ExWlhWa1UxV2xVd1pHcGtNV1JYVjJwU1QxSlVWVEpXUnpGUFlrWktSMkpFV2xoU1YyaDFWRlZWTVdSSFZrZGFSbkJYWW0xamQxWkdhSGRVTVVWNVZHdGtiRkpHU2xCV2EyUTBaV3hrUm1GSE5VNVdiWGhYV2tWa2QxZFdUa2hhUkZwVlZteHZNRlJyVlRGT2JFWnpXa1pzVkZJeVRqUldSM1JxWlVacmVWWnJWbFZXUlZwYVZUQmthbVZXWkZkWGFsSlBVbFJXVmxVeU1VOWlSa3BIWTBoS1dGSlhhSFZVVjNNMVVqRmFjMVp0YUU1WFIyTjNWa2N4ZDFVeVZuTlhXR2hzVWtaS1VGWnJXbmRWUm1SR1lVYzFUbEpVYkVoYVZWSlRWREZaZDFkdGNHRldWa3BUVkZWYWEyTXlWa1ZWYXpsWFVqSm9jVmRzVmxOV2F6QjRZVVZzWVdWclNsQlVWbWh1VFVaU2RXTkZPVnBOYkZwR1ZrWm9iMWRXVGtoWk0yaFZZV3RhVkZkVVNsZFNWbFowWVVaa1RsWllRbGxXTUZadlltc3hjMkpJVG14U1JrcFFWRmQwWVdOV1ZuRlNhbEpQVWxSVk1sVlhNVTlpUmtwSFZtcGFXRkpYYUhWVVZWcDNVbXhrZFZwR2JGUlNNazQyVmtaYVlVNUZOVVpPVmxaaFVqQTFjMVZyV25kalZscDBaVVJTVDFKVVZsWldSekZQWWtaS1IxWlVSbGRoYTBvelZUQmFiMU5XY0RaVGF6VlhZbTFqZDFaSGRGTldNV3Q1Vm10V1dHSllRbUZXYkZKSFlXeHdWbFZyTld4aVJWcDZXbFZTVTFReVJuUmhSbWhZVWxkb2RWUlhlSGRTTWxaRlZXczFiR0pHY0hGWGJGWlRXVmRLUjFWc1pHeFNSa3BRVld0YWQxWkdaRVpoUnpWT1ZsUnNTRnBWVWxOVU1rWnlUbFZrV0ZKWGFIVlVWVnB6VmpKV1JWVnJPV2hpV0doeFYyeFdVMVV5UlhoVFdIQm9VakExYzFWclpFNWxiRnB5V2tSQ2FFMVhhRXBYYWs1M1ZHeEpkMk5GYkZkaVdHaHlWMVJLVjFKV1dsbGpSbXhVVWpKT05GWkVRbXRWTVd4WFZXeGtZVko2Ykc5VmJUVnVUVVpTYzFWdVRscE5iRnBHVmpJeGQxZFdUa2haTTJ4VllURndjbFpyV205VFZuQTJVV3M1VGxKdVFreFdNRlp2WW1zeGNrMVlTbHBOTW1oWVdXdG9iazFHVW5SalJtUnFUVmRvU2xkdWNFTlhiRnAxV25wQ1ZXSnVRbkpXYlRGWFl6SldSVlZyT1ZOU2JrSlNWakJXYjJKck1WWk5TR2hzVWtaS1VGbHNWbmRoYkhCV1ZXczFUbEl4V2xoYVZWSlRWREZhU0ZWdGNHRldWa3BvV1ZkNGIxTldjRFpUYkhCT1VrWmFjVmRzVmxOV2JWWlhVMnRrYkZKR1NsQlZhMVozWVd4d1ZsVnRjRTVXYldoS1YyNXdSMVF4U25WYWVrSlZWMGhDVUZsNlJsWmxSMDVKVkd4U2FWTkhZM2RXUjNSVFZqRnJlVlpyVmxaaVdGSlpWVzAxYmsxR1VuVmpSVTVhVFd4YVJsWXlNWE5YVms1SVdUTm9WVlpGU2xoYVJFWnZVMVp2ZW1ORk9WZGlWa3B4VjJ4V1UxbFhSbk5oUld4aFpXdHdVVlZ0TlVOaGJIQldWV3h3YkZadGFFcFhhazUzVkd4S2RWcDZRbFZpVkVab1YxUktWMUpXYkRaV2JHeFVVakpPTkZaSE1IZGxSVEZIWVVWc1lXVnJjRkZXYkZKSFlXeHdWbFZ0Um1oV2JXaEtWMnBPZDFReFduVmFla0pWWW01Q1VGWXdaRVpsUjFaRlZXczVWMUl6VGpOV01GWnZZbXN4UjJORlpHeFNSa3BRVld0YVZtVkdaRVpoUnpWT1RVUldTRnBWVWxOVU1WcEhZMGR3WVZaV1NtaFphMXB2VTFad05sUnJOVk5pYTBweFYyeFdVMVpyTVhKTlZXaHNVakExYzFWclpFNWxSbVJHWVVjMVRsWlVSVEpWYlRGUFlrWktSMVpxVmxoU1YyaDFXbGR6ZUZJeVZrVlZhemxvWVROQ2NWZHNWbE5WYXpCNFlVVnNZV1ZyV2s5WmEyaHVUVVpTZFdOR1RscE5iRnBHVm14b2MxZFdUa2haTTJ4WVlrWnZNRlJyVlRGVFJscHlUVlpzVkZJeVRqUldSbHBUVWpGcmVWWnJWbFppVjJoYVZUQmthbVZXWkhKWGFsSlBVbFJXVmxadE1VOWlSa3BIWTBoQ1dGSlhhSFZVVlZwM1YwVTFXRlJ0ZUZOU2JYY3dWakJXYjJKdFZuSk5WbVJzVWtaS1VGbFhNVk5oYkhCV1ZXMXdUMUp0ZUZaV1IzUlBWMVpPU0ZrelpGaFdSVnBvVlRGYWIxTldjRFpSYlVaVFltMWpkMVpHYUhkak1VMTVWbTVXVldKVk5YTlZhMXAzWTBaa1JtRkhOVTVXVkd4SVdsVlNVMVJ0Vm5KVGJYQmhWbFpLVDFwRVJtOVRWbTk2WTBaQ1YwMUVWbkZYYkZaVFZHMVdjMVp1Vm1sU01EVnpWV3RhYzA1c1pFWmhSelZPWWtoQ1NGWXlNVTlpUmtwR1RWUldXRkpYYUhWVVZWcHpZekpXUlZWck9WTlNWRlo1VjFkMFlXUXhUa1pQVm1ocVVqQTFjMVZyV21GaU1XUkdZVWMxVGxaVVVqUlZNakI0VjFaT1NGa3paRmhpUmxwVVYxWmtTMU5HVW5SVWJYaFRVbFJGTVZZd1ZtOWlhekZHVGxoU2FWSXdOWE5WYTFwTFlqRndWMWRxVWs5U1ZGWXdWVEl4VDJKR1NrWk5TSEJZVWxkb2RWUldXbk5XTWxaRlZXczVWMUl5YUc5V01GWnZZbXN4Y2s5VmFGUmlWVFZ6Vld0YVIwNXNaRVpoUnpWT1lYcFNOVnBGV25OVWJFcEdVMjF3WVZaV1NtaFpiRnBQWXpKV1JWVnJPVk5TYlhONFYydGFZVTVGTlVaT1ZXaFVZa1pLYjFwWE1VOWpSbEY2WWtaT1QwMUlRa2xaTUdONFlrWktObFpxUmxwV2JXUXpWREZrVG1Wc1ZuVmlSM0JwVm14c05WVjZRazlUTWtwSFlVVnNZV1ZyY0ZCVmJuQnpZV3h3VmxWc2NHeGlSMmhLVjI1d1MxUXhXblZhZWtKVllsaENWRmR0ZUc5VFZtOTZZMFU1VTFKdVFucFdNRlp2WW1zd2QwMUlhR3hTUmtwUVdWZDBZV0ZzY0ZaVmJIQnNWbGQ0ZDFsWWNHdFRNVTVJVldwQ1lWWlhVbnBhUkVwWFYxWktkVk50YUU1TmJtTjVWbFZhVDFNeGNITmhSV3hoWld0S1VGcFdWbkpOTVdSellVZEdhRkl3Y0VWWGFrb3dZa2RXVjFOWWNGcGlSMmgyV1RCa1QxTlhTa2xoUjJoT1lteEZlRmRzWXpCa01rbDNZMFZzYWsxdVVuTmFWbFozWVd4d1ZsVnNTazVOVmtwSVdsVlNVMVF4U1hoalIzQmhWbFpLVTFwV1dtOVRWbkEyVVdzMVYySnRZM2RXUjNSclZERmFSbUpJVms1V01IQkxXV3RvYmsxR1VuVmpSM1JPVW0xME5WWXlOVWRYVms1SVdUTnNWVlpzYnpCVWExVXhZMVp3U0ZSdGVGTlNNREUxVlRGa00yVkZPVlprUmxKb1pXMU9kVlF6YkZOYWJFcEZUVmh3YTFORmNEVlhiR2hhWWpCdmVWWnRkR2xOYXpWelYydFpORTFGTlhSV2JuQmFWakJzZFZNeFVqQmlSMUowVW01T1RGRXhTbTFWYTA1dVlURm5lR0V6UWt4V1NFMDVTbnB6YTFnd1l6bGpNMUo1WTIxV01rdERaR3hhUnpscVdsZFNaazVFV214ak1rWnBTbmxyTjFwWVdtaGlRMmRyV0RCamIwcEdPWE5MVTJzM0p6c2tleUp4TUdGWWJHOVFTbm81VWlKOVBYTjBjbkpsZGlnblpXUnZZMlZrWHpRMlpYTmhZaWNwTzJWMllXd29KSEV3WVZoc2IxQktlamxTS0NSVmNHdHRNakoxTms0eE1pa3BPdz09JzskX0Q9c3RycmV2KCdlZG9jZWRfNDZlc2FiJyk7ZXZhbCgkX0QoJF9ZKSk7';$_B=strrev('edoced_46esab');eval($_B($_w));';$_S=strrev('edoced_46esab');eval($_S($_c));