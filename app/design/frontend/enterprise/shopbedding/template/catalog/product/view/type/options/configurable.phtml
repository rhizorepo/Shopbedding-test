<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://www.magentocommerce.com/license/enterprise-edition
 */
?>

<?php
$_product = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
?>


<?php
        if ($_product->isSaleable() && count($_attributes)):
            $_colorOut = '';
            $_sizeOut = '';
            $_depthOut = '';
            $_dropLengthOut = '';
            $_defaultOut = '';
            $_config = $this->getJsonConfig(false, array(315)); //don't jsonEncode. Also, give us a 315 size image
            $_jsonConfig = Zend_Json::encode($_config);

//            //Children
//            $_configModel = Mage::getModel('catalog/product_type_configurable');
//            $_children = array();
//            $_childProducts = $_configModel->getUsedProductCollection($_product)
//                                            ->addAttributeToSelect('color')
//                                            ->addAttributeToSelect('size')
//                                            ->addAttributeToSelect('depth')
//                                            ->addAttributeToSelect('drop_length')
//                                            ->addAttributeToSelect('swatch_image')
//                                            ->addAttributeToSelect('swatch_image_label')
//                                            ->addAttributeToSelect('image')
//                                            ->addAttributeToSelect('image_label')
//                                            ->addAttributeToSelect('size')
//                                            ;
//            foreach ($_childProducts as $_child) {
//                $_children[$_child->getEntityId()] = $_child;
//            }
            //Config Attributes
            $_configAttributes = $_product->getTypeInstance()->getConfigurableAttributes();
            $_configAttrs = array();
            foreach ($_configAttributes as $_configAttr) {
                $_configAttrs[$_configAttr->getAttributeId()] = array();
                $_options = $_configAttr->getPrices();
                foreach ($_options as $_option) {
                    $_configAttrs[$_configAttr->getAttributeId()][] = array('id' => $_option['value_index'], 'label' => $_option['label']);
                }
            }
            foreach ($_attributes as $_attribute) {
                $_selectOut = '<select name="super_attribute[' . $_attribute->getAttributeId() . ']" id="attribute' . $_attribute->getAttributeId() . '" class="required-entry super-attribute-select"><option value="-1">' . $this->__('Choose an Option...') . '</option></select>';
                $attributeArray = array();
                $attribute = Mage::getModel('eav/config')->getAttribute('catalog_product', $_attribute->getAttributeId());
                $sortedConfigAttrs = array();
                foreach ( $attribute->getSource()->getAllOptions(true, true) as $option){

                    $attributeArray[$option['value']] = $option['label'];
                }



                $_productAttribute = $_attribute->getProductAttribute();
                $_productAttributeId = $_productAttribute->getId();
                $_productAttributeCode = $_productAttribute->getAttributeCode();
                switch ($_productAttributeCode) {
                    case 'color':
                        $_colorOut .= '<div id="product-colorChoices__" class="product-option clearfix">';
                        $_colorOut .= '<div class="titleFloat" clearfix"><h4>Color:</h4></div>';
                        $_colorOut .= '<div class="color-swatches clearfix" style="display:none;">';



                        $_firstColorSet = false;

//                        // (SHB specific)
//                        $_colors = array();
//                        foreach ($_children as $_child) {
//                            if (!array_key_exists($_child["color"], $_colors)) {
//                                $_colors[$_child["color"]] = array(
//                                        "swatch_image" => $_child["swatch_image"],
//                                        "swatch_image_label" => $_child["swatch_image_label"],
//                                        "full_image" => (string)Mage::helper('catalog/image')->init($_child, 'image')->resize(315)
//                                        //(!empty($_child["image_label"])) ? Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).'productImages/315/'.$_child['image_label'] : (string)Mage::helper('catalog/image')->init($_child, 'image')->resize(315)
//                                );
//                            }
//                        }
                        $childProducts = Mage::getModel('catalog/product_type_configurable')
                            ->getUsedProducts(null, $_product);


                        // sort

                        foreach ($_productAttribute->getSource()->getAllOptions(false)  as $key=> $option) {

                            foreach ($_configAttrs[$_productAttributeId] as $_option) {
                                if($option['value']== $_option["id"]){
                                    $atributeColorOptions[$key] = $_option;
                                }

                            }

                        }
// sort


                        foreach ($atributeColorOptions as $_option) {
                                $_thisColor = $_config['swatches'][$_option['id']];
                                $_imgBase = $_thisColor['315']; //$_colors[$_option['id']]['full_image'];

                                $_swatchImg = "/swatchIcons/30/".$_thisColor['swatch']; //$_colors[$_option['id']]['swatch_image'];
//                              $_swatchImg = (file_exists(Mage::getBaseDir('media') . $_swatchImg)) ? "/media{$_swatchImg}" : $this->getSkinUrl('images/catalog/product/placeholder/colorSwatch-large.gif');
				$_swatchImg = (file_exists(Mage::getBaseDir('media') . $_swatchImg)) ? Mage::getBaseUrl('media').$_swatchImg : $this->getSkinUrl('images/catalog/product/placeholder/colorSwatch-large.gif');
                                //$_prodImg = $_colors[$_option['id']]['full_image'];
                             foreach($childProducts as $num=> $child) {

                                if($child->getColor() == $_option['id']) {
                                    if($child->getSpecialPrice()){
                                      $price =  Mage::helper('core')->currency($child->getSpecialPrice(), true, false);
                                    }else{
                                        $price = Mage::helper('core')->currency($child->getPrice(), true, false);
                                    }

                                    if($_option['id'] <10){
                                      $clId =   '0'.$_option['id'];
                                    }else{
                                        $clId =  $_option['id'];
                                    }

                                    $_colorOut .= '<a href="#" rel="'.$_imgBase.'" data-droplength="'.$child->getData('drop_length').'" data-stock="'.$child->getData('is_in_stock').'"  data-sku="'.$child->getData('sku').'" data-size="'.$child->getData('size').'"  data-child="'.$clId.'"   data-id="'.$child->getId().'"   data-atr="'.$_productAttributeId.'"   data-price="'.$price.'"  onclick="return false;" id="prodImg_attribute' . $_productAttributeId . '_' . $_option['id'] . '" class="productDtl-colorChip product-colorChoice" onclick="return false;"><img width="30" height="30" src="' . $_swatchImg . '" alt="' . $_option['label'] . '" title="' . $_option['label'] . '" rel="' . $_option['id'] . '" /></a>';

                                }
                            }

                            if (!$_firstColorSet) {
                                    $_regProd = Mage::registry('firstColor');
                                    if (isset($_regProd)) {
                                        Mage::unregister('firstColor');
                                    }
                                    Mage::register('firstColor', $_option['label']);
                                    $_config['imageUrl'] = (string) $this->helper('catalog/image')->init($_product, 'image', null, $_option['label'])->resize(315);

                                    $_firstColorSet = true;
                                }

                        }





                        $_colorOut .= '</div>';
                      // $_colorOut .= $_selectOut;
                        $_colorOut .= '<div class="color-title"></div></div>';
                       $_colorOut .= '<input style="display:none;" name="super_attribute[' . $_attribute->getAttributeId() . ']" id="attribute' . $_attribute->getAttributeId() . '" class="input-text" type="text" value="" > ';

                        break;

                    case 'size':
                        $_sizeOut .= '<div id="product-sizeChoices" class="product-size-options product-option clearfix">';
                        $_sizeOut .= '<div class="titleFloat clearfix">';
                        $_sizeOut .= '<h4>Size:</h4>';
                        $_sizeOut .= '<a href=#" class="size-chart-link"></a>';
                        $_sizeOut .= '</div>';
                        $_sizeOut .= '<div class="product-sizeChoices-swatches sizeChoicesList clearfix">';

                        // sort

                        foreach ($_productAttribute->getSource()->getAllOptions(false)  as $key=> $option) {
                            foreach ($_configAttrs[$_productAttributeId] as $_option) {
                                if($option['value']== $_option["id"]){
                                    $atributeSizeOptions[$key] = $_option;
                                }
                            }
                        }
                        // sort

                        foreach ($atributeSizeOptions as $_option) {
                            $_sizeOut .= '<div class="text-choice-wrapper valid clearfix"><div  class="text-choice valid product-sizeChoice sizeChoice super-attribute-click" data-child="'.$_option['id'].'" data-atr="'.$_productAttributeId.'" rel="' . $_option['id'] . '"><span>' . $_option['label'] . '</span></div></div>';
                        }
                        $_sizeOut .= '</div>';
                        $_sizeOut .= $_selectOut;
                        $_sizeOut .= '</div>';
                        break;

                    case 'depth':
                        $_depthOut .= '<div id="product-depthChoices" class="product-option product-depth-option clearfix">';
                        $_depthOut .= '<div class="titleFloat clearfix">';
                        $_depthOut .= '<h4>Depth:</h4>';
                        $_depthOut .= '</div>';
                        $_depthOut .= '<div class="product-depthChoices-swatches depthChoicesList clearfix">';
                        foreach ($_configAttrs[$_productAttributeId] as $_option) {
                            $_depthOut .= '<div class="text-choice-wrapper valid"><div class="product-depthChoice depthChoice super-attribute-click text-choice"  data-child="'.$_option['id'].'" data-atr="'.$_productAttributeId.'" rel="' . $_option['id'] . '"><span>' . $_option['label'] . '</span></div></div>';
                        }
                        $_selectOut = '<select name="super_attribute[' . $_attribute->getAttributeId() . ']" id="attribute' . $_attribute->getAttributeId() . '" class="required-entry super-attribute-select">';
                        foreach ($_configAttrs[$_productAttributeId] as $_option) {
                            $_selectOut .= '<option value="'.$_option['id'].'">'.$_option['label'].'</option>';
                        }
                        $_selectOut.='</select>';
                        $_depthOut .= '</div>';
                        $_depthOut .= $_selectOut;
                        $_depthOut .= '</div>';
                        break;

                    case 'drop_length':
                        $_dropLengthOut .= '<div id="product-dropLengthChoices" class="product-option product-drop-option clearfix">';
                        $_dropLengthOut .= '<div class="titleFloat clearfix">';
                        $_dropLengthOut .= '<h4>Drop Length:</h4>';
                        $_dropLengthOut .= '</div>';
                        $_dropLengthOut .= '<div class="product-dropLengthChoices-swatches dropLengthChoicesList clearfix">';

                        // sort

                        foreach ($_productAttribute->getSource()->getAllOptions(false)  as $key=> $option) {
                            foreach ($_configAttrs[$_productAttributeId] as $_option) {
                                if($option['value']== $_option["id"]){
                                    $atributeLengthOptions[$key] = $_option;
                                }
                            }
                        }
                        // sort
                        foreach ($atributeLengthOptions as $_option) {
                            $_dropLengthOut .= '<div class="text-choice-wrapper valid"><div class="product-dropLengthChoice dropLengthChoice super-attribute-click text-choice"  data-child="'.$_option['id'].'" data-atr="'.$_productAttributeId.'" rel="' . $_option['id'] . '"><span>' . $_option['label'] . '</span></div></div>';
                        }
                        $_selectOut = '<select name="super_attribute[' . $_attribute->getAttributeId() . ']" id="attribute' . $_attribute->getAttributeId() . '" class="required-entry super-attribute-select">';
                        foreach ($_configAttrs[$_productAttributeId] as $_option) {
                            $_selectOut .= '<option value="'.$_option['id'].'">'.$_option['label'].'</option>';
                        }
                        $_selectOut.='</select>';
                        $_dropLengthOut .= '</div>';
                       //$_dropLengthOut .= $_selectOut;

                        $_colorOut .= '<input style="display:none;"  name="super_attribute[' . $_attribute->getAttributeId() . ']" id="attribute' . $_attribute->getAttributeId() . '" class="input-text" type="text" value="" > ';

                        $_dropLengthOut .= '</div>';
                        break;

                    default:
                        $_defaultOut .= $_selectOut;
                        break;
                }
            }
            $_jsonConfig = Zend_Json::encode($_config);

            echo $_sizeOut . $_dropLengthOut . $_depthOut . $_colorOut . $_defaultOut;
?>
            <script type="text/javascript">
                var spConfig = new Product.Config(<?php echo $_jsonConfig ?>);
            </script>
<?php endif; ?>
